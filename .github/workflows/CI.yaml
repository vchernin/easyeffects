on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

name: CI
jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-20.04
    outputs:
      github_commit_desc: ${{ steps.get_commit_desc.outputs.github_commit_desc }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0

      - name: Get head branch latest commit
        run: echo "GITHUB_PR_HEAD_SHA=$(git log --pretty=format:'%h' $GITHUB_SHA^2 -1)" >> $GITHUB_ENV

      - name: Get base branch latest commit
        run: echo "GITHUB_PR_BASE_SHA=$(git log --pretty=format:'%h' $GITHUB_SHA^1 -1)" >> $GITHUB_ENV

      - name: Get latest commit
        run: echo "GITHUB_HEAD_SHA=$(git log --pretty=format:'%h' -1)" >> $GITHUB_ENV
      
      - id: get_commit_desc
        run: | 
          if [[ ${{ github.event_name }} == 'pull_request' ]]; then
            echo "::set-output name=github_commit_desc::merge-${{ env.GITHUB_PR_HEAD_SHA }}-into-${{ env.GITHUB_PR_BASE_SHA }}"
          else
            echo "::set-output name=github_commit_desc::master-${{ env.GITHUB_HEAD_SHA }}"
          fi

  flatpak:
    name: Flatpak
    runs-on: ubuntu-20.04
    env:
      FLATPAK_BUILD_PATH: flatpak_app/files/share
    needs: prepare
    container:
      image: bilelmoussaoui/flatpak-github-actions:gnome-42
      options: --privileged
    strategy:
      matrix:
        arch: [x86_64, aarch64]
      # Don't fail the whole workflow if one architecture fails
      fail-fast: false
    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.2
    
    - name: Install deps
      run: dnf -y install docker
    
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v2.0.0
      with:
        platforms: arm64

    - uses: bilelmoussaoui/flatpak-github-actions/flatpak-builder@v4
      with:
        bundle: easyeffects-flatpak-${{ needs.prepare.outputs.github_commit_desc }}.flatpak
        manifest-path: util/flatpak/com.github.wwmm.easyeffects.json
        cache-key: flatpak-builder-${{ github.sha }}
        arch: ${{ matrix.arch }}
        run-tests: true
    
    # we also validate appstream in the appstream-news-validate job, 
    # but we still should specifically ensure the flatpak outputs it properly
    - name: Validate AppStream
      shell: bash
      working-directory: ${{ env.FLATPAK_BUILD_PATH }}
      run: |
        appstream-util validate-relax appdata/com.github.wwmm.easyeffects.appdata.xml
    
    - name: Verify icon and metadata in app-info
      shell: bash
      working-directory: ${{ env.FLATPAK_BUILD_PATH }}
      run: |
        test -f app-info/icons/flatpak/128x128/com.github.wwmm.easyeffects.png || { echo "Missing 128x128 icon in app-info" ; exit 1; }
        test -f app-info/xmls/com.github.wwmm.easyeffects.xml.gz || { echo "Missing com.github.wwmm.easyeffects.xml.gz in app-info" ; exit 1; }

  arch-linux:
    name: Arch Linux
    runs-on: ubuntu-20.04
    needs: prepare
    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.2
      with:
        # needed for getting git describe info for pkgver() in pkgbuild
        fetch-depth: 0

    - name: Save commit description to file
      run: echo ${{ needs.prepare.outputs.github_commit_desc }} >> GITHUB_COMMIT_DESC

    - name: Makepkg Build and Check
      id: makepkg
      uses: vchernin/pkgbuild-action@master
      with:
        # todo this doesn't work
        namcapExcludeRules: unusedsodepends

    - name: Upload Package Archive
      uses: actions/upload-artifact@v3.1.0
      with:
        name: easyeffects-archlinux-${{ needs.prepare.outputs.github_commit_desc }}-x86_64
        path: ${{ steps.makepkg.outputs.pkgfile0 }}
        if-no-files-found: error

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    container:
      image: archlinux
    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'python' ]
         # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
         # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.0.2

    - name: Install deps
      run: |
        pacman -Syu --noconfirm ninja gcc pkgconf python3 which
        source ./PKGBUILD && pacman -Syu --noconfirm --needed --asdeps "${makedepends[@]}" "${depends[@]}"

     # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
         # If you wish to specify custom queries, you can do so here or in a config file.
         # By default, queries listed here will override any specified in a config file.
         # Prefix the list here with "+" to use these queries and those in the config file.

         # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
         # queries: security-extended,security-and-quality
     
     # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
     # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

     # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
     # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

     #   If the Autobuild fails above, remove it and uncomment the following three lines. 
     #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.
    # - name: Build
    #   run: |
    #     echo "Run, Build Application using script"
    #     meson builddir && cd builddir
    #     meson compile
    #     cd ..
    #     exit

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
     # with:
       # sha: ${{ github.sha }} 
       # ref: ${{ github.ref }}

  appstream-news-validate:
    name: AppStream and News validate
    runs-on: ubuntu-20.04
    container:
      image: archlinux
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2
      
      - name: Install deps
        run: pacman -Syu --noconfirm libxml2 libxslt appstream appstream-glib which
        
      - name: Validate existing files
        run: ./util/update-release-files.sh --no-new-release
