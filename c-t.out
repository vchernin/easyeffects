error: unable to handle compilation, expected exactly one compiler job in '' [clang-diagnostic-error]
warning: /var/home/v/devel/easyeffects/src/meson.build: 'linker' input unused [clang-diagnostic-unused-command-line-argument]
/var/home/v/devel/easyeffects/include/app_info.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/app_info.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(AppInfo, app_info, EE, APP_INFO, GtkBox)
^
/var/home/v/devel/easyeffects/include/app_info.hpp:46:28: warning: parameter 'node_info' is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions [readability-avoid-const-params-in-decls]
void update(AppInfo* self, const NodeInfo node_info);
                           ^~~~~~
/var/home/v/devel/easyeffects/include/application.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/application.hpp:49:8: warning: declaration uses identifier '_Application', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _Application {
       ^~~~~~~~~~~~
       Application
/var/home/v/devel/easyeffects/include/application.hpp:49:8: warning: constructor does not initialize these fields: parent_instance, settings, soe_settings, sie_settings, pm, soe, sie, presets_manager, data [cppcoreguidelines-pro-type-member-init]
struct _Application {
       ^
/var/home/v/devel/easyeffects/include/application_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/application_ui.hpp:35:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(ApplicationWindow, application_window, EE, APP_WINDOW, AdwApplicationWindow)
^
/var/home/v/devel/easyeffects/include/apps_box.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/apps_box.hpp:38:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(AppsBox, apps_box, EE, APPS_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/autogain_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/autogain_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(AutogainBox, autogain_box, EE, AUTOGAIN_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/bass_enhancer_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/bass_enhancer_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(BassEnhancerBox, bass_enhancer_box, EE, BASS_ENHANCER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/bass_loudness_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/bass_loudness_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(BassLoudnessBox, bass_loudness_box, EE, BASS_LOUDNESS_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/blocklist_menu.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/blocklist_menu.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(BlocklistMenu, blocklist_menu, EE, BLOCKLIST_MENU, GtkPopover)
^
/var/home/v/devel/easyeffects/include/chart.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/chart.hpp:41:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(Chart, chart, EE, CHART, GtkWidget)
^
/var/home/v/devel/easyeffects/include/client_info_holder.hpp:22:10: error: 'gtk/gtk.h' file not found [clang-diagnostic-error]
#include <gtk/gtk.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/compressor_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/compressor_ui.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(CompressorBox, compressor_box, EE, COMPRESSOR_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/convolver.hpp:89:15: warning: variable 'conv_left_in' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_left_in{conv->inpdata(0), conv->inpdata(0) + get_zita_buffer_size()};
              ^
                           = 0
/var/home/v/devel/easyeffects/include/convolver.hpp:90:15: warning: variable 'conv_right_in' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_right_in{conv->inpdata(1), conv->inpdata(1) + get_zita_buffer_size()};
              ^
                            = 0
/var/home/v/devel/easyeffects/include/convolver.hpp:92:15: warning: variable 'conv_left_out' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_left_out{conv->outdata(0), conv->outdata(0) + get_zita_buffer_size()};
              ^
                            = 0
/var/home/v/devel/easyeffects/include/convolver.hpp:93:15: warning: variable 'conv_right_out' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_right_out{conv->outdata(1), conv->outdata(1) + get_zita_buffer_size()};
              ^
                             = 0
/var/home/v/devel/easyeffects/include/convolver_menu_combine.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/convolver_menu_combine.hpp:35:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(ConvolverMenuCombine, convolver_menu_combine, EE, CONVOLVER_MENU_COMBINE, GtkPopover)
^
/var/home/v/devel/easyeffects/include/convolver_menu_impulses.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/convolver_menu_impulses.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(ConvolverMenuImpulses, convolver_menu_impulses, EE, CONVOLVER_MENU_IMPULSES, GtkPopover)
^
/var/home/v/devel/easyeffects/include/convolver_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/convolver_ui.hpp:42:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(ConvolverBox, convolver_box, EE, CONVOLVER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/crossfeed.hpp:22:10: error: 'bs2bclass.h' file not found [clang-diagnostic-error]
#include <bs2bclass.h>
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/include/crossfeed_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/crossfeed_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(CrossfeedBox, crossfeed_box, EE, CROSSFEED_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/crystalizer.hpp:132:21: warning: variable 'L' is not initialized [cppcoreguidelines-init-variables]
        const float L = band_data_L.at(n)[0];
                    ^
                      = NAN
/var/home/v/devel/easyeffects/include/crystalizer.hpp:133:21: warning: variable 'R' is not initialized [cppcoreguidelines-init-variables]
        const float R = band_data_R.at(n)[0];
                    ^
                      = NAN
/var/home/v/devel/easyeffects/include/crystalizer.hpp:148:23: warning: variable 'L' is not initialized [cppcoreguidelines-init-variables]
          const float L = band_data_L.at(n)[m];
                      ^
                        = NAN
/var/home/v/devel/easyeffects/include/crystalizer.hpp:149:23: warning: variable 'R' is not initialized [cppcoreguidelines-init-variables]
          const float R = band_data_R.at(n)[m];
                      ^
                        = NAN
/var/home/v/devel/easyeffects/include/crystalizer.hpp:181:23: warning: variable 'L' is not initialized [cppcoreguidelines-init-variables]
          const float L = band_data_L.at(n)[m];
                      ^
                        = NAN
/var/home/v/devel/easyeffects/include/crystalizer.hpp:182:23: warning: variable 'R' is not initialized [cppcoreguidelines-init-variables]
          const float R = band_data_R.at(n)[m];
                      ^
                        = NAN
/var/home/v/devel/easyeffects/include/crystalizer_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/crystalizer_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(CrystalizerBox, crystalizer_box, EE, CRYSTALIZER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/deesser_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/deesser_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(DeesserBox, deesser_box, EE, DEESSER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/delay_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/delay_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(DelayBox, delay_box, EE, DELAY_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/echo_canceller_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/echo_canceller_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(EchoCancellerBox, echo_canceller_box, EE, ECHO_CANCELLER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/effects_base.hpp:22:10: error: 'set' file not found [clang-diagnostic-error]
#include <set>
         ^~~~~
/var/home/v/devel/easyeffects/include/effects_box.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/effects_box.hpp:38:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(EffectsBox, effects_box, EE, EFFECTS_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/equalizer.hpp:96:55: warning: all parameters should be named in a function [readability-named-parameter]
  constexpr void bind_bands(std::index_sequence<Ns...>) {
                                                      ^
                                                       /*unused*/
/var/home/v/devel/easyeffects/include/equalizer_band_box.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/equalizer_band_box.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(EqualizerBandBox, equalizer_band_box, EE, EQUALIZER_BAND_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/equalizer_preset.hpp:25:7: warning: class 'EqualizerPreset' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class EqualizerPreset : public PluginPresetBase {
      ^
/var/home/v/devel/easyeffects/include/equalizer_preset.hpp:28:3: warning: annotate this function with 'override' or (rarely) 'final' [cppcoreguidelines-explicit-virtual-functions,modernize-use-override]
  ~EqualizerPreset();
  ^
                     override
/var/home/v/devel/easyeffects/include/equalizer_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/equalizer_ui.hpp:37:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(EqualizerBox, equalizer_box, EE, EQUALIZER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/exciter_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/exciter_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(ExciterBox, exciter_box, EE, EXCITER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/filter_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/filter_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(FilterBox, filter_box, EE, FILTER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/fir_filter_base.hpp:54:15: warning: variable 'conv_left_in' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_left_in{conv->inpdata(0), conv->inpdata(0) + n_samples};
              ^
                           = 0
/var/home/v/devel/easyeffects/include/fir_filter_base.hpp:55:15: warning: variable 'conv_right_in' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_right_in{conv->inpdata(1), conv->inpdata(1) + n_samples};
              ^
                            = 0
/var/home/v/devel/easyeffects/include/fir_filter_base.hpp:57:15: warning: variable 'conv_left_out' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_left_out{conv->outdata(0), conv->outdata(0) + n_samples};
              ^
                            = 0
/var/home/v/devel/easyeffects/include/fir_filter_base.hpp:58:15: warning: variable 'conv_right_out' is not initialized [cppcoreguidelines-init-variables]
    std::span conv_right_out{conv->outdata(1), conv->outdata(1) + n_samples};
              ^
                             = 0
/var/home/v/devel/easyeffects/include/fir_filter_base.hpp:67:29: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        util::debug(log_tag + "IR: process failed: " + util::to_string(ret, ""));
                            ^
/var/home/v/devel/easyeffects/include/gate_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/gate_ui.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(GateBox, gate_box, EE, GATE_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/limiter_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/limiter_ui.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(LimiterBox, limiter_box, EE, LIMITER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/loudness_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/loudness_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(LoudnessBox, loudness_box, EE, LOUDNESS_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/lv2_wrapper.hpp:22:10: error: 'lilv/lilv.h' file not found [clang-diagnostic-error]
#include <lilv/lilv.h>
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/include/maximizer_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/maximizer_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(MaximizerBox, maximizer_box, EE, MAXIMIZER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/module_info_holder.hpp:22:10: error: 'gtk/gtk.h' file not found [clang-diagnostic-error]
#include <gtk/gtk.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/multiband_compressor.hpp:121:55: warning: all parameters should be named in a function [readability-named-parameter]
  constexpr void bind_bands(std::index_sequence<Ns...>) {
                                                      ^
                                                       /*unused*/
/var/home/v/devel/easyeffects/include/multiband_compressor_band_box.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/multiband_compressor_band_box.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(MultibandCompressorBandBox,
^
/var/home/v/devel/easyeffects/include/multiband_compressor_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/multiband_compressor_ui.hpp:35:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(MultibandCompressorBox, multiband_compressor_box, EE, MULTIBAND_COMPRESSOR_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/multiband_gate.hpp:120:55: warning: all parameters should be named in a function [readability-named-parameter]
  constexpr void bind_bands(std::index_sequence<Ns...>) {
                                                      ^
                                                       /*unused*/
/var/home/v/devel/easyeffects/include/multiband_gate_band_box.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/multiband_gate_band_box.hpp:34:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(MultibandGateBandBox, multiband_gate_band_box, EE, MULTIBAND_GATE_BAND_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/multiband_gate_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/multiband_gate_ui.hpp:35:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(MultibandGateBox, multiband_gate_box, EE, MULTIBAND_GATE_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/node_info_holder.hpp:22:10: error: 'gtk/gtk.h' file not found [clang-diagnostic-error]
#include <gtk/gtk.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/pipe_manager.hpp:22:10: error: 'pipewire/extensions/metadata.h' file not found [clang-diagnostic-error]
#include <pipewire/extensions/metadata.h>
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/include/pipe_manager.hpp:40:8: warning: constructor does not initialize these fields: id, device_id, serial, name, description, media_class, app_icon_name, media_icon_name, device_icon_name, media_name, format, application_id [cppcoreguidelines-pro-type-member-init]
struct NodeInfo {
       ^
/var/home/v/devel/easyeffects/include/pipe_manager.hpp:88:8: warning: constructor does not initialize these fields: path, id, serial [cppcoreguidelines-pro-type-member-init]
struct LinkInfo {
       ^
/var/home/v/devel/easyeffects/include/pipe_manager.hpp:108:8: warning: constructor does not initialize these fields: path, format_dsp, audio_channel, name, direction, id, serial [cppcoreguidelines-pro-type-member-init]
struct PortInfo {
       ^
/var/home/v/devel/easyeffects/include/pipe_manager.hpp:158:8: warning: constructor does not initialize these fields: id, serial, name, description, nick, media_class, api, input_route_name, output_route_name, bus_id, bus_path, input_route_available, output_route_available [cppcoreguidelines-pro-type-member-init]
struct DeviceInfo {
       ^
/var/home/v/devel/easyeffects/include/pipe_manager.hpp:200:22: warning: variable 'exiting' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  inline static bool exiting = false;
                     ^
/var/home/v/devel/easyeffects/include/pipe_manager.hpp:202:22: warning: variable 'exclude_monitor_stream' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
  inline static bool exclude_monitor_stream = true;
                     ^
/var/home/v/devel/easyeffects/include/pipe_manager_box.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/pipe_manager_box.hpp:38:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(PipeManagerBox, pipe_manager_box, EE, PIPE_MANAGER_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/pitch_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/pitch_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(PitchBox, pitch_box, EE, PITCH_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/plugin_base.hpp:22:10: error: 'pipewire/filter.h' file not found [clang-diagnostic-error]
#include <pipewire/filter.h>
         ^~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:22:10: error: 'gio/gio.h' file not found [clang-diagnostic-error]
#include <gio/gio.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:44:8: warning: method 'write' can be made static [readability-convert-member-functions-to-static]
  void write(nlohmann::json& json) {
       ^
  static 
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:74:15: warning: variable 'variant' is not initialized [cppcoreguidelines-init-variables]
    GVariant* variant = g_settings_get_default_value(settings, key.c_str());
              ^
                      = nullptr
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:78:46: warning: repeated branch in conditional chain [bugprone-branch-clone]
    if constexpr (std::is_same_v<T, double>) {
                                             ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:80:6: note: end of the original
    } else if constexpr (std::is_same_v<T, int>) {
     ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:80:50: note: clone 1 starts here
    } else if constexpr (std::is_same_v<T, int>) {
                                                 ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:82:51: note: clone 2 starts here
    } else if constexpr (std::is_same_v<T, bool>) {
                                                  ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:85:14: warning: variable 'length' is not initialized [cppcoreguidelines-init-variables]
      gsize* length = nullptr;
             ^
                    = nullptr
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:105:19: warning: variable 'tmp' is not initialized [cppcoreguidelines-init-variables]
      std::string tmp = json.value(json_key, get_default<T>(settings, key));
                  ^
                      = 0
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:111:46: warning: repeated branch in conditional chain [bugprone-branch-clone]
    if constexpr (std::is_same_v<T, double>) {
                                             ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:113:6: note: end of the original
    } else if constexpr (std::is_same_v<T, int>) {
     ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:113:50: note: clone 1 starts here
    } else if constexpr (std::is_same_v<T, int>) {
                                                 ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:115:51: note: clone 2 starts here
    } else if constexpr (std::is_same_v<T, bool>) {
                                                  ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:117:53: note: clone 3 starts here
    } else if constexpr (std::is_same_v<T, gchar*>) {
                                                    ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:122:48: warning: repeated branch in conditional chain [bugprone-branch-clone]
      if constexpr (std::is_same_v<T, double>) {
                                               ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:124:8: note: end of the original
      } else if constexpr (std::is_same_v<T, int>) {
       ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:124:52: note: clone 1 starts here
      } else if constexpr (std::is_same_v<T, int>) {
                                                   ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:126:53: note: clone 2 starts here
      } else if constexpr (std::is_same_v<T, bool>) {
                                                    ^
/var/home/v/devel/easyeffects/include/plugin_preset_base.hpp:128:55: note: clone 3 starts here
      } else if constexpr (std::is_same_v<T, gchar*>) {
                                                      ^
/var/home/v/devel/easyeffects/include/plugins_box.hpp:55:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(PluginsBox, plugins_box, EE, PLUGINS_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/plugins_menu.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/plugins_menu.hpp:37:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(PluginsMenu, plugins_menu, EE, PLUGINS_MENU, GtkPopover)
^
/var/home/v/devel/easyeffects/include/preferences_general.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/preferences_spectrum.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/presets_autoloading_holder.hpp:22:10: error: 'gtk/gtk.h' file not found [clang-diagnostic-error]
#include <gtk/gtk.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/presets_autoloading_holder.hpp:40:8: warning: declaration uses identifier '_PresetsAutoloadingHolder', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PresetsAutoloadingHolder {
       ^~~~~~~~~~~~~~~~~~~~~~~~~
       PresetsAutoloadingHolder
/var/home/v/devel/easyeffects/include/presets_autoloading_holder.hpp:40:8: warning: constructor does not initialize these fields: parent_instance, data [cppcoreguidelines-pro-type-member-init]
struct _PresetsAutoloadingHolder {
       ^
/var/home/v/devel/easyeffects/include/presets_manager.hpp:22:10: error: 'gio/gio.h' file not found [clang-diagnostic-error]
#include <gio/gio.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/presets_menu.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/presets_menu.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(PresetsMenu, presets_menu, EE, PRESETS_MENU, GtkPopover)
^
/var/home/v/devel/easyeffects/include/reverb_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/reverb_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(ReverbBox, reverb_box, EE, REVERB_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/rnnoise_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/rnnoise_ui.hpp:35:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(RNNoiseBox, rnnoise_box, EE, RNNOISE_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/stereo_tools_ui.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/stereo_tools_ui.hpp:33:1: warning: variable 'G_DECLARE_FINAL_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DECLARE_FINAL_TYPE(StereoToolsBox, stereo_tools_box, EE, STEREO_TOOLS_BOX, GtkBox)
^
/var/home/v/devel/easyeffects/include/stereo_tools_ui.hpp:39:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(StereoToolsBox* self, std::shared_ptr<StereoTools> stereo_tools, const std::string& schema_path);
     ^
/var/home/v/devel/easyeffects/include/stream_input_effects.hpp:46:21: warning: parameter 'node_info' is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions [readability-avoid-const-params-in-decls]
  void on_app_added(const NodeInfo node_info);
                    ^~~~~~
/var/home/v/devel/easyeffects/include/stream_input_effects.hpp:48:24: warning: parameter 'link_info' is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions [readability-avoid-const-params-in-decls]
  void on_link_changed(const LinkInfo link_info);
                       ^~~~~~
/var/home/v/devel/easyeffects/include/stream_output_effects.hpp:44:21: warning: parameter 'node_info' is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions [readability-avoid-const-params-in-decls]
  void on_app_added(const NodeInfo node_info);
                    ^~~~~~
/var/home/v/devel/easyeffects/include/stream_output_effects.hpp:46:24: warning: parameter 'link_info' is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions [readability-avoid-const-params-in-decls]
  void on_link_changed(const LinkInfo link_info);
                       ^~~~~~
/var/home/v/devel/easyeffects/include/string_literal_wrapper.hpp:22:10: error: 'array' file not found [clang-diagnostic-error]
#include <array>
         ^~~~~~~
/var/home/v/devel/easyeffects/include/string_literal_wrapper.hpp:27:3: warning: constructor does not initialize these fields: msg [cppcoreguidelines-pro-type-member-init]
  constexpr StringLiteralWrapper(const char (&str)[N]) : msg(std::to_array(str)) {}
  ^
/var/home/v/devel/easyeffects/include/string_literal_wrapper.hpp:27:40: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
  constexpr StringLiteralWrapper(const char (&str)[N]) : msg(std::to_array(str)) {}
                                       ^
/var/home/v/devel/easyeffects/include/tags_app.hpp:22:10: error: 'string' file not found [clang-diagnostic-error]
#include <string>
         ^~~~~~~~
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:22:10: error: 'array' file not found [clang-diagnostic-error]
#include <array>
         ^~~~~~~
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:33:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_type[][13] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:41:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_mode[][13] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:49:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_slope[][14] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:57:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_solo[][13] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:65:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_mute[][13] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:73:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_frequency[][18] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:82:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_q[][10] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:88:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_gain[][13] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:98:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char ftl[][8] = {{"ftl_0"},  {"ftl_1"},  {"ftl_2"},  {"ftl_3"},  {"ftl_4"},  {"ftl_5"},  {"ftl_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:104:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char fml[][8] = {{"fml_0"},  {"fml_1"},  {"fml_2"},  {"fml_3"},  {"fml_4"},  {"fml_5"},  {"fml_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:110:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sl[][7] = {{"sl_0"},  {"sl_1"},  {"sl_2"},  {"sl_3"},  {"sl_4"},  {"sl_5"},  {"sl_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:116:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char xsl[][8] = {{"xsl_0"},  {"xsl_1"},  {"xsl_2"},  {"xsl_3"},  {"xsl_4"},  {"xsl_5"},  {"xsl_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:122:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char xml[][8] = {{"xml_0"},  {"xml_1"},  {"xml_2"},  {"xml_3"},  {"xml_4"},  {"xml_5"},  {"xml_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:128:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char ql[][7] = {{"ql_0"},  {"ql_1"},  {"ql_2"},  {"ql_3"},  {"ql_4"},  {"ql_5"},  {"ql_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:134:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char fl[][7] = {{"fl_0"},  {"fl_1"},  {"fl_2"},  {"fl_3"},  {"fl_4"},  {"fl_5"},  {"fl_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:140:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char gl[][7] = {{"gl_0"},  {"gl_1"},  {"gl_2"},  {"gl_3"},  {"gl_4"},  {"gl_5"},  {"gl_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:148:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char ftr[][8] = {{"ftr_0"},  {"ftr_1"},  {"ftr_2"},  {"ftr_3"},  {"ftr_4"},  {"ftr_5"},  {"ftr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:154:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char fmr[][8] = {{"fmr_0"},  {"fmr_1"},  {"fmr_2"},  {"fmr_3"},  {"fmr_4"},  {"fmr_5"},  {"fmr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:160:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sr[][7] = {{"sr_0"},  {"sr_1"},  {"sr_2"},  {"sr_3"},  {"sr_4"},  {"sr_5"},  {"sr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:166:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char xsr[][8] = {{"xsr_0"},  {"xsr_1"},  {"xsr_2"},  {"xsr_3"},  {"xsr_4"},  {"xsr_5"},  {"xsr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:172:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char xmr[][8] = {{"xmr_0"},  {"xmr_1"},  {"xmr_2"},  {"xmr_3"},  {"xmr_4"},  {"xmr_5"},  {"xmr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:178:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char qr[][7] = {{"qr_0"},  {"qr_1"},  {"qr_2"},  {"qr_3"},  {"qr_4"},  {"qr_5"},  {"qr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:184:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char fr[][7] = {{"fr_0"},  {"fr_1"},  {"fr_2"},  {"fr_3"},  {"fr_4"},  {"fr_5"},  {"fr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_equalizer.hpp:190:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char gr[][7] = {{"gr_0"},  {"gr_1"},  {"gr_2"},  {"gr_3"},  {"gr_4"},  {"gr_5"},  {"gr_6"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:22:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::multiband_compressor {
              ^~~~~~~~~~~~~~~~~~~~~~
               { namespace multiband_compressor
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:26:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_enable[][14] = {{"enable-band0"}, {"enable-band1"}, {"enable-band2"}, {"enable-band3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:26:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_enable[][14] = {{"enable-band0"}, {"enable-band1"}, {"enable-band2"}, {"enable-band3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:29:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_compression_mode[][19] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:29:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_compression_mode[][19] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:33:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_compressor_enable[][20] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:33:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_compressor_enable[][20] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:37:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_split_frequency[][18] = {{"split-frequency0"}, {"split-frequency1"}, {"split-frequency2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:37:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_split_frequency[][18] = {{"split-frequency0"}, {"split-frequency1"}, {"split-frequency2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:41:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_mute[][7] = {{"mute0"}, {"mute1"}, {"mute2"}, {"mute3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:41:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_mute[][7] = {{"mute0"}, {"mute1"}, {"mute2"}, {"mute3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:44:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_solo[][7] = {{"solo0"}, {"solo1"}, {"solo2"}, {"solo3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:44:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_solo[][7] = {{"solo0"}, {"solo1"}, {"solo2"}, {"solo3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:47:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_lowcut_filter[][33] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:47:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_lowcut_filter[][33] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:52:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_highcut_filter[][34] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:52:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_highcut_filter[][34] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:57:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_external_sidechain[][21] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:57:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_external_sidechain[][21] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:61:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_mode[][17] = {{"sidechain-mode0"}, {"sidechain-mode1"}, {"sidechain-mode2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:61:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_mode[][17] = {{"sidechain-mode0"}, {"sidechain-mode1"}, {"sidechain-mode2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:65:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_source[][19] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:65:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_source[][19] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:69:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_lowcut_filter_frequency[][29] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:69:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_lowcut_filter_frequency[][29] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:74:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_highcut_filter_frequency[][30] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:74:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_highcut_filter_frequency[][30] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:79:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_attack_time[][14] = {{"attack-time0"}, {"attack-time1"}, {"attack-time2"}, {"attack-time3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:79:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_attack_time[][14] = {{"attack-time0"}, {"attack-time1"}, {"attack-time2"}, {"attack-time3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:82:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_attack_threshold[][19] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:82:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_attack_threshold[][19] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:86:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_release_time[][15] = {{"release-time0"}, {"release-time1"}, {"release-time2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:86:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_release_time[][15] = {{"release-time0"}, {"release-time1"}, {"release-time2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:90:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_release_threshold[][20] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:90:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_release_threshold[][20] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:94:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_ratio[][8] = {{"ratio0"}, {"ratio1"}, {"ratio2"}, {"ratio3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:94:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_ratio[][8] = {{"ratio0"}, {"ratio1"}, {"ratio2"}, {"ratio3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:97:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_knee[][7] = {{"knee0"}, {"knee1"}, {"knee2"}, {"knee3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:97:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_knee[][7] = {{"knee0"}, {"knee1"}, {"knee2"}, {"knee3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:100:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_makeup[][9] = {{"makeup0"}, {"makeup1"}, {"makeup2"}, {"makeup3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:100:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_makeup[][9] = {{"makeup0"}, {"makeup1"}, {"makeup2"}, {"makeup3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:103:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_preamp[][19] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:103:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_preamp[][19] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:107:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_reactivity[][23] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:107:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_reactivity[][23] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:111:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_lookahead[][22] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:111:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_lookahead[][22] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:115:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_boost_amount[][15] = {{"boost-amount0"}, {"boost-amount1"}, {"boost-amount2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:115:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_boost_amount[][15] = {{"boost-amount0"}, {"boost-amount1"}, {"boost-amount2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:119:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_boost_threshold[][18] = {{"boost-threshold0"}, {"boost-threshold1"}, {"boost-threshold2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:119:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_boost_threshold[][18] = {{"boost-threshold0"}, {"boost-threshold1"}, {"boost-threshold2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:125:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sce[][7] = {{"sce_0"}, {"sce_1"}, {"sce_2"}, {"sce_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:125:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sce[][7] = {{"sce_0"}, {"sce_1"}, {"sce_2"}, {"sce_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:128:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char cbe[][7] = {{"cbe_0"}, {"cbe_1"}, {"cbe_2"}, {"cbe_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:128:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char cbe[][7] = {{"cbe_0"}, {"cbe_1"}, {"cbe_2"}, {"cbe_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:131:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sf[][6] = {{"sf_0"}, {"sf_1"}, {"sf_2"}, {"sf_3"}, {"sf_4"}, {"sf_5"}, {"sf_6"}, {"sf_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:131:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sf[][6] = {{"sf_0"}, {"sf_1"}, {"sf_2"}, {"sf_3"}, {"sf_4"}, {"sf_5"}, {"sf_6"}, {"sf_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:133:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scs[][7] = {{"scs_0"}, {"scs_1"}, {"scs_2"}, {"scs_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:133:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scs[][7] = {{"scs_0"}, {"scs_1"}, {"scs_2"}, {"scs_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:136:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scm[][7] = {{"scm_0"}, {"scm_1"}, {"scm_2"}, {"scm_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:136:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scm[][7] = {{"scm_0"}, {"scm_1"}, {"scm_2"}, {"scm_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:139:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sla[][7] = {{"sla_0"}, {"sla_1"}, {"sla_2"}, {"sla_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:139:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sla[][7] = {{"sla_0"}, {"sla_1"}, {"sla_2"}, {"sla_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:142:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scr[][7] = {{"scr_0"}, {"scr_1"}, {"scr_2"}, {"scr_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:142:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scr[][7] = {{"scr_0"}, {"scr_1"}, {"scr_2"}, {"scr_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:145:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scp[][7] = {{"scp_0"}, {"scp_1"}, {"scp_2"}, {"scp_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:145:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scp[][7] = {{"scp_0"}, {"scp_1"}, {"scp_2"}, {"scp_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:148:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sclc[][8] = {{"sclc_0"}, {"sclc_1"}, {"sclc_2"}, {"sclc_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:148:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sclc[][8] = {{"sclc_0"}, {"sclc_1"}, {"sclc_2"}, {"sclc_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:151:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char schc[][8] = {{"schc_0"}, {"schc_1"}, {"schc_2"}, {"schc_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:151:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char schc[][8] = {{"schc_0"}, {"schc_1"}, {"schc_2"}, {"schc_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:154:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sclf[][8] = {{"sclf_0"}, {"sclf_1"}, {"sclf_2"}, {"sclf_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:154:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sclf[][8] = {{"sclf_0"}, {"sclf_1"}, {"sclf_2"}, {"sclf_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:157:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char schf[][8] = {{"schf_0"}, {"schf_1"}, {"schf_2"}, {"schf_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:157:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char schf[][8] = {{"schf_0"}, {"schf_1"}, {"schf_2"}, {"schf_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:160:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char cm[][6] = {{"cm_0"}, {"cm_1"}, {"cm_2"}, {"cm_3"}, {"cm_4"}, {"cm_5"}, {"cm_6"}, {"cm_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:160:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char cm[][6] = {{"cm_0"}, {"cm_1"}, {"cm_2"}, {"cm_3"}, {"cm_4"}, {"cm_5"}, {"cm_6"}, {"cm_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:162:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char ce[][6] = {{"ce_0"}, {"ce_1"}, {"ce_2"}, {"ce_3"}, {"ce_4"}, {"ce_5"}, {"ce_6"}, {"ce_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:162:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char ce[][6] = {{"ce_0"}, {"ce_1"}, {"ce_2"}, {"ce_3"}, {"ce_4"}, {"ce_5"}, {"ce_6"}, {"ce_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:164:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char bs[][6] = {{"bs_0"}, {"bs_1"}, {"bs_2"}, {"bs_3"}, {"bs_4"}, {"bs_5"}, {"bs_6"}, {"bs_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:164:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char bs[][6] = {{"bs_0"}, {"bs_1"}, {"bs_2"}, {"bs_3"}, {"bs_4"}, {"bs_5"}, {"bs_6"}, {"bs_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:166:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char bm[][6] = {{"bm_0"}, {"bm_1"}, {"bm_2"}, {"bm_3"}, {"bm_4"}, {"bm_5"}, {"bm_6"}, {"bm_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:166:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char bm[][6] = {{"bm_0"}, {"bm_1"}, {"bm_2"}, {"bm_3"}, {"bm_4"}, {"bm_5"}, {"bm_6"}, {"bm_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:168:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char al[][6] = {{"al_0"}, {"al_1"}, {"al_2"}, {"al_3"}, {"al_4"}, {"al_5"}, {"al_6"}, {"al_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:168:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char al[][6] = {{"al_0"}, {"al_1"}, {"al_2"}, {"al_3"}, {"al_4"}, {"al_5"}, {"al_6"}, {"al_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:170:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char at[][6] = {{"at_0"}, {"at_1"}, {"at_2"}, {"at_3"}, {"at_4"}, {"at_5"}, {"at_6"}, {"at_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:170:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char at[][6] = {{"at_0"}, {"at_1"}, {"at_2"}, {"at_3"}, {"at_4"}, {"at_5"}, {"at_6"}, {"at_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:172:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char rrl[][7] = {{"rrl_0"}, {"rrl_1"}, {"rrl_2"}, {"rrl_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:172:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char rrl[][7] = {{"rrl_0"}, {"rrl_1"}, {"rrl_2"}, {"rrl_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:175:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char rt[][6] = {{"rt_0"}, {"rt_1"}, {"rt_2"}, {"rt_3"}, {"rt_4"}, {"rt_5"}, {"rt_6"}, {"rt_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:175:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char rt[][6] = {{"rt_0"}, {"rt_1"}, {"rt_2"}, {"rt_3"}, {"rt_4"}, {"rt_5"}, {"rt_6"}, {"rt_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:177:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char cr[][6] = {{"cr_0"}, {"cr_1"}, {"cr_2"}, {"cr_3"}, {"cr_4"}, {"cr_5"}, {"cr_6"}, {"cr_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:177:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char cr[][6] = {{"cr_0"}, {"cr_1"}, {"cr_2"}, {"cr_3"}, {"cr_4"}, {"cr_5"}, {"cr_6"}, {"cr_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:179:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char kn[][6] = {{"kn_0"}, {"kn_1"}, {"kn_2"}, {"kn_3"}, {"kn_4"}, {"kn_5"}, {"kn_6"}, {"kn_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:179:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char kn[][6] = {{"kn_0"}, {"kn_1"}, {"kn_2"}, {"kn_3"}, {"kn_4"}, {"kn_5"}, {"kn_6"}, {"kn_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:181:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char bth[][7] = {{"bth_0"}, {"bth_1"}, {"bth_2"}, {"bth_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:181:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char bth[][7] = {{"bth_0"}, {"bth_1"}, {"bth_2"}, {"bth_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:184:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char bsa[][7] = {{"bsa_0"}, {"bsa_1"}, {"bsa_2"}, {"bsa_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:184:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char bsa[][7] = {{"bsa_0"}, {"bsa_1"}, {"bsa_2"}, {"bsa_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:187:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char mk[][6] = {{"mk_0"}, {"mk_1"}, {"mk_2"}, {"mk_3"}, {"mk_4"}, {"mk_5"}, {"mk_6"}, {"mk_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_compressor.hpp:187:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char mk[][6] = {{"mk_0"}, {"mk_1"}, {"mk_2"}, {"mk_3"}, {"mk_4"}, {"mk_5"}, {"mk_6"}, {"mk_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:22:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::multiband_gate {
              ^~~~~~~~~~~~~~~~
               { namespace multiband_gate
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:26:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_enable[][14] = {{"enable-band0"}, {"enable-band1"}, {"enable-band2"}, {"enable-band3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:26:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_enable[][14] = {{"enable-band0"}, {"enable-band1"}, {"enable-band2"}, {"enable-band3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:29:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_gate_enable[][20] = {{"gate-enable0"}, {"gate-enable1"}, {"gate-enable2"}, {"gate-enable3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:29:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_gate_enable[][20] = {{"gate-enable0"}, {"gate-enable1"}, {"gate-enable2"}, {"gate-enable3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:32:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_split_frequency[][18] = {{"split-frequency0"}, {"split-frequency1"}, {"split-frequency2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:32:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_split_frequency[][18] = {{"split-frequency0"}, {"split-frequency1"}, {"split-frequency2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:36:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_mute[][7] = {{"mute0"}, {"mute1"}, {"mute2"}, {"mute3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:36:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_mute[][7] = {{"mute0"}, {"mute1"}, {"mute2"}, {"mute3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:39:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_solo[][7] = {{"solo0"}, {"solo1"}, {"solo2"}, {"solo3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:39:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_solo[][7] = {{"solo0"}, {"solo1"}, {"solo2"}, {"solo3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:42:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_lowcut_filter[][33] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:42:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_lowcut_filter[][33] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:47:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_highcut_filter[][34] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:47:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_highcut_filter[][34] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:52:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_external_sidechain[][21] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:52:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_external_sidechain[][21] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:56:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_mode[][17] = {{"sidechain-mode0"}, {"sidechain-mode1"}, {"sidechain-mode2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:56:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_mode[][17] = {{"sidechain-mode0"}, {"sidechain-mode1"}, {"sidechain-mode2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:60:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_source[][19] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:60:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_source[][19] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:64:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_lowcut_filter_frequency[][29] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:64:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_lowcut_filter_frequency[][29] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:69:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_highcut_filter_frequency[][30] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:69:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_highcut_filter_frequency[][30] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:74:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_attack_time[][14] = {{"attack-time0"}, {"attack-time1"}, {"attack-time2"}, {"attack-time3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:74:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_attack_time[][14] = {{"attack-time0"}, {"attack-time1"}, {"attack-time2"}, {"attack-time3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:77:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_release_time[][15] = {{"release-time0"}, {"release-time1"}, {"release-time2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:77:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_release_time[][15] = {{"release-time0"}, {"release-time1"}, {"release-time2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:81:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_hysteresis[][13] = {{"hysteresis0"}, {"hysteresis1"}, {"hysteresis2"}, {"hysteresis3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:81:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_hysteresis[][13] = {{"hysteresis0"}, {"hysteresis1"}, {"hysteresis2"}, {"hysteresis3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:84:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_hysteresis_threshold[][22] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:84:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_hysteresis_threshold[][22] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:88:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_hysteresis_zone[][18] = {{"hysteresis-zone0"}, {"hysteresis-zone1"}, {"hysteresis-zone2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:88:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_hysteresis_zone[][18] = {{"hysteresis-zone0"}, {"hysteresis-zone1"}, {"hysteresis-zone2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:92:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_curve_threshold[][18] = {{"curve-threshold0"}, {"curve-threshold1"}, {"curve-threshold2"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:92:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_curve_threshold[][18] = {{"curve-threshold0"}, {"curve-threshold1"}, {"curve-threshold2"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:96:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_curve_zone[][13] = {{"curve-zone0"}, {"curve-zone1"}, {"curve-zone2"}, {"curve-zone3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:96:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_curve_zone[][13] = {{"curve-zone0"}, {"curve-zone1"}, {"curve-zone2"}, {"curve-zone3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:99:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_reduction[][12] = {{"reduction0"}, {"reduction1"}, {"reduction2"}, {"reduction3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:99:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_reduction[][12] = {{"reduction0"}, {"reduction1"}, {"reduction2"}, {"reduction3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:102:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_makeup[][9] = {{"makeup0"}, {"makeup1"}, {"makeup2"}, {"makeup3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:102:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_makeup[][9] = {{"makeup0"}, {"makeup1"}, {"makeup2"}, {"makeup3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:105:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_preamp[][19] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:105:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_preamp[][19] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:109:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_reactivity[][23] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:109:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_reactivity[][23] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:113:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char band_sidechain_lookahead[][22] = {
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:113:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char band_sidechain_lookahead[][22] = {
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:119:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char cbe[][7] = {{"cbe_0"}, {"cbe_1"}, {"cbe_2"}, {"cbe_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:119:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char cbe[][7] = {{"cbe_0"}, {"cbe_1"}, {"cbe_2"}, {"cbe_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:122:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sf[][6] = {{"sf_0"}, {"sf_1"}, {"sf_2"}, {"sf_3"}, {"sf_4"}, {"sf_5"}, {"sf_6"}, {"sf_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:122:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sf[][6] = {{"sf_0"}, {"sf_1"}, {"sf_2"}, {"sf_3"}, {"sf_4"}, {"sf_5"}, {"sf_6"}, {"sf_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:124:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sce[][7] = {{"sce_0"}, {"sce_1"}, {"sce_2"}, {"sce_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:124:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sce[][7] = {{"sce_0"}, {"sce_1"}, {"sce_2"}, {"sce_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:127:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scs[][7] = {{"scs_0"}, {"scs_1"}, {"scs_2"}, {"scs_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:127:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scs[][7] = {{"scs_0"}, {"scs_1"}, {"scs_2"}, {"scs_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:130:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scm[][7] = {{"scm_0"}, {"scm_1"}, {"scm_2"}, {"scm_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:130:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scm[][7] = {{"scm_0"}, {"scm_1"}, {"scm_2"}, {"scm_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:133:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sla[][7] = {{"sla_0"}, {"sla_1"}, {"sla_2"}, {"sla_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:133:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sla[][7] = {{"sla_0"}, {"sla_1"}, {"sla_2"}, {"sla_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:136:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scr[][7] = {{"scr_0"}, {"scr_1"}, {"scr_2"}, {"scr_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:136:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scr[][7] = {{"scr_0"}, {"scr_1"}, {"scr_2"}, {"scr_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:139:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char scp[][7] = {{"scp_0"}, {"scp_1"}, {"scp_2"}, {"scp_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:139:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char scp[][7] = {{"scp_0"}, {"scp_1"}, {"scp_2"}, {"scp_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:142:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sclc[][8] = {{"sclc_0"}, {"sclc_1"}, {"sclc_2"}, {"sclc_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:142:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sclc[][8] = {{"sclc_0"}, {"sclc_1"}, {"sclc_2"}, {"sclc_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:145:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char schc[][8] = {{"schc_0"}, {"schc_1"}, {"schc_2"}, {"schc_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:145:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char schc[][8] = {{"schc_0"}, {"schc_1"}, {"schc_2"}, {"schc_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:148:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char sclf[][8] = {{"sclf_0"}, {"sclf_1"}, {"sclf_2"}, {"sclf_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:148:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char sclf[][8] = {{"sclf_0"}, {"sclf_1"}, {"sclf_2"}, {"sclf_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:151:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char schf[][8] = {{"schf_0"}, {"schf_1"}, {"schf_2"}, {"schf_3"},
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:151:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char schf[][8] = {{"schf_0"}, {"schf_1"}, {"schf_2"}, {"schf_3"},
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:154:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char ce[][6] = {{"ge_0"}, {"ge_1"}, {"ge_2"}, {"ge_3"}, {"ge_4"}, {"ge_5"}, {"ge_6"}, {"ge_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:154:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char ce[][6] = {{"ge_0"}, {"ge_1"}, {"ge_2"}, {"ge_3"}, {"ge_4"}, {"ge_5"}, {"ge_6"}, {"ge_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:156:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char bs[][6] = {{"bs_0"}, {"bs_1"}, {"bs_2"}, {"bs_3"}, {"bs_4"}, {"bs_5"}, {"bs_6"}, {"bs_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:156:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char bs[][6] = {{"bs_0"}, {"bs_1"}, {"bs_2"}, {"bs_3"}, {"bs_4"}, {"bs_5"}, {"bs_6"}, {"bs_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:158:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char bm[][6] = {{"bm_0"}, {"bm_1"}, {"bm_2"}, {"bm_3"}, {"bm_4"}, {"bm_5"}, {"bm_6"}, {"bm_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:158:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char bm[][6] = {{"bm_0"}, {"bm_1"}, {"bm_2"}, {"bm_3"}, {"bm_4"}, {"bm_5"}, {"bm_6"}, {"bm_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:160:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char gh[][6] = {{"gh_0"}, {"gh_1"}, {"gh_2"}, {"gh_3"}, {"gh_4"}, {"gh_5"}, {"gh_6"}, {"gh_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:160:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char gh[][6] = {{"gh_0"}, {"gh_1"}, {"gh_2"}, {"gh_3"}, {"gh_4"}, {"gh_5"}, {"gh_6"}, {"gh_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:162:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char ht[][6] = {{"ht_0"}, {"ht_1"}, {"ht_2"}, {"ht_3"}, {"ht_4"}, {"ht_5"}, {"ht_6"}, {"ht_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:162:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char ht[][6] = {{"ht_0"}, {"ht_1"}, {"ht_2"}, {"ht_3"}, {"ht_4"}, {"ht_5"}, {"ht_6"}, {"ht_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:164:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char hz[][6] = {{"hz_0"}, {"hz_1"}, {"hz_2"}, {"hz_3"}, {"hz_4"}, {"hz_5"}, {"hz_6"}, {"hz_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:164:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char hz[][6] = {{"hz_0"}, {"hz_1"}, {"hz_2"}, {"hz_3"}, {"hz_4"}, {"hz_5"}, {"hz_6"}, {"hz_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:166:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char gt[][6] = {{"gt_0"}, {"gt_1"}, {"gt_2"}, {"gt_3"}, {"gt_4"}, {"gt_5"}, {"gt_6"}, {"gt_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:166:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char gt[][6] = {{"gt_0"}, {"gt_1"}, {"gt_2"}, {"gt_3"}, {"gt_4"}, {"gt_5"}, {"gt_6"}, {"gt_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:168:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char gz[][6] = {{"gz_0"}, {"gz_1"}, {"gz_2"}, {"gz_3"}, {"gz_4"}, {"gz_5"}, {"gz_6"}, {"gz_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:168:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char gz[][6] = {{"gz_0"}, {"gz_1"}, {"gz_2"}, {"gz_3"}, {"gz_4"}, {"gz_5"}, {"gz_6"}, {"gz_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:170:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char at[][6] = {{"at_0"}, {"at_1"}, {"at_2"}, {"at_3"}, {"at_4"}, {"at_5"}, {"at_6"}, {"at_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:170:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char at[][6] = {{"at_0"}, {"at_1"}, {"at_2"}, {"at_3"}, {"at_4"}, {"at_5"}, {"at_6"}, {"at_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:172:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char rt[][6] = {{"rt_0"}, {"rt_1"}, {"rt_2"}, {"rt_3"}, {"rt_4"}, {"rt_5"}, {"rt_6"}, {"rt_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:172:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char rt[][6] = {{"rt_0"}, {"rt_1"}, {"rt_2"}, {"rt_3"}, {"rt_4"}, {"rt_5"}, {"rt_6"}, {"rt_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:174:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char gr[][6] = {{"gr_0"}, {"gr_1"}, {"gr_2"}, {"gr_3"}, {"gr_4"}, {"gr_5"}, {"gr_6"}, {"gr_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:174:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char gr[][6] = {{"gr_0"}, {"gr_1"}, {"gr_2"}, {"gr_3"}, {"gr_4"}, {"gr_5"}, {"gr_6"}, {"gr_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:177:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr char mk[][6] = {{"mk_0"}, {"mk_1"}, {"mk_2"}, {"mk_3"}, {"mk_4"}, {"mk_5"}, {"mk_6"}, {"mk_7"}};
^
/var/home/v/devel/easyeffects/include/tags_multiband_gate.hpp:177:18: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
inline constexpr char mk[][6] = {{"mk_0"}, {"mk_1"}, {"mk_2"}, {"mk_3"}, {"mk_4"}, {"mk_5"}, {"mk_6"}, {"mk_7"}};
                 ^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:22:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::pipewire {
              ^~~~~~~~~~
               { namespace pipewire
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:24:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto ee_source_name = "easyeffects_source";
^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:26:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto ee_sink_name = "easyeffects_sink";
^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:30:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::pipewire::media_class {
              ^~~~~~~~~~~~~~~~~~~~~~~
               { namespace pipewire { namespace media_class
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:32:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto device = "Audio/Device";
^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:34:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto sink = "Audio/Sink";
^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:36:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto source = "Audio/Source";
^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:38:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto virtual_source = "Audio/Source/Virtual";
^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:40:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_stream = "Stream/Input/Audio";
^
/var/home/v/devel/easyeffects/include/tags_pipewire.hpp:42:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_stream = "Stream/Output/Audio";
^
/var/home/v/devel/easyeffects/include/tags_plugin_name.hpp:22:10: error: 'glib/gi18n.h' file not found [clang-diagnostic-error]
#include <glib/gi18n.h>
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/include/tags_resources.hpp:22:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::resources {
              ^~~~~~~~~~~
               { namespace resources
/var/home/v/devel/easyeffects/include/tags_resources.hpp:26:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto icons = "/com/github/wwmm/easyeffects/icons";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:30:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto css = "/com/github/wwmm/easyeffects/ui/custom.css";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:34:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto app_info_ui = "/com/github/wwmm/easyeffects/ui/app_info.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:36:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto application_window_ui = "/com/github/wwmm/easyeffects/ui/application_window.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:38:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto apps_box_ui = "/com/github/wwmm/easyeffects/ui/apps_box.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:40:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto autogain_ui = "/com/github/wwmm/easyeffects/ui/autogain.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:42:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto autoload_row_ui = "/com/github/wwmm/easyeffects/ui/autoload_row.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:44:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto bass_enhancer_ui = "/com/github/wwmm/easyeffects/ui/bass_enhancer.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:46:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto bass_loudness_ui = "/com/github/wwmm/easyeffects/ui/bass_loudness.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:48:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto blocklist_menu_ui = "/com/github/wwmm/easyeffects/ui/blocklist_menu.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:50:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto chart_ui = "/com/github/wwmm/easyeffects/ui/chart.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:52:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto compressor_ui = "/com/github/wwmm/easyeffects/ui/compressor.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:54:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto convolver_ui = "/com/github/wwmm/easyeffects/ui/convolver.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:56:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto convolver_menu_impulses_ui = "/com/github/wwmm/easyeffects/ui/convolver_menu_impulses.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:58:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto convolver_menu_combine_ui = "/com/github/wwmm/easyeffects/ui/convolver_menu_combine.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:60:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto crossfeed_ui = "/com/github/wwmm/easyeffects/ui/crossfeed.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:62:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto crystalizer_ui = "/com/github/wwmm/easyeffects/ui/crystalizer.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:64:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto crystalizer_band_ui = "/com/github/wwmm/easyeffects/ui/crystalizer_band.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:66:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto deesser_ui = "/com/github/wwmm/easyeffects/ui/deesser.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:68:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto delay_ui = "/com/github/wwmm/easyeffects/ui/delay.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:70:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto echo_canceller_ui = "/com/github/wwmm/easyeffects/ui/echo_canceller.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:72:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto effects_box_ui = "/com/github/wwmm/easyeffects/ui/effects_box.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:74:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto equalizer_band_ui = "/com/github/wwmm/easyeffects/ui/equalizer_band.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:76:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto equalizer_ui = "/com/github/wwmm/easyeffects/ui/equalizer.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:78:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto exciter_ui = "/com/github/wwmm/easyeffects/ui/exciter.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:80:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto filter_ui = "/com/github/wwmm/easyeffects/ui/filter.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:82:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto gate_ui = "/com/github/wwmm/easyeffects/ui/gate.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:84:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto limiter_ui = "/com/github/wwmm/easyeffects/ui/limiter.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:86:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto loudness_ui = "/com/github/wwmm/easyeffects/ui/loudness.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:88:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto maximizer_ui = "/com/github/wwmm/easyeffects/ui/maximizer.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:90:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto multiband_compressor_ui = "/com/github/wwmm/easyeffects/ui/multiband_compressor.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:92:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto multiband_compressor_band_ui = "/com/github/wwmm/easyeffects/ui/multiband_compressor_band.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:94:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto multiband_gate_ui = "/com/github/wwmm/easyeffects/ui/multiband_gate.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:96:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto multiband_gate_band_ui = "/com/github/wwmm/easyeffects/ui/multiband_gate_band.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:98:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto pipe_manager_box_ui = "/com/github/wwmm/easyeffects/ui/pipe_manager_box.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:100:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto pitch_ui = "/com/github/wwmm/easyeffects/ui/pitch.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:102:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto plugin_row_ui = "/com/github/wwmm/easyeffects/ui/plugin_row.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:104:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto plugins_box_ui = "/com/github/wwmm/easyeffects/ui/plugins_box.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:106:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto plugins_menu_ui = "/com/github/wwmm/easyeffects/ui/plugins_menu.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:108:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto preferences_general_ui = "/com/github/wwmm/easyeffects/ui/preferences_general.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:110:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto preferences_spectrum_ui = "/com/github/wwmm/easyeffects/ui/preferences_spectrum.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:112:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto preferences_window_ui = "/com/github/wwmm/easyeffects/ui/preferences_window.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:114:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto preset_row_ui = "/com/github/wwmm/easyeffects/ui/preset_row.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:116:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto presets_menu_ui = "/com/github/wwmm/easyeffects/ui/presets_menu.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:118:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto reverb_ui = "/com/github/wwmm/easyeffects/ui/reverb.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:120:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto rnnoise_ui = "/com/github/wwmm/easyeffects/ui/rnnoise.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:122:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto shortcuts_ui = "/com/github/wwmm/easyeffects/ui/shortcuts.ui";
^
/var/home/v/devel/easyeffects/include/tags_resources.hpp:124:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto stereo_tools_ui = "/com/github/wwmm/easyeffects/ui/stereo_tools.ui";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:22:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema {
              ^~~~~~~~
               { namespace schema
/var/home/v/devel/easyeffects/include/tags_schema.hpp:24:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id_input = "com.github.wwmm.easyeffects.streaminputs";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:26:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id_output = "com.github.wwmm.easyeffects.streamoutputs";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:30:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::autogain {
              ^~~~~~~~~~~~~~~~~~
               { namespace schema { namespace autogain
/var/home/v/devel/easyeffects/include/tags_schema.hpp:32:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.autogain";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:34:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/autogain/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:36:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/autogain/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:40:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::bass_enhancer {
              ^~~~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace bass_enhancer
/var/home/v/devel/easyeffects/include/tags_schema.hpp:42:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.bassenhancer";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:44:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/bassenhancer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:46:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/bassenhancer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:50:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::bass_loudness {
              ^~~~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace bass_loudness
/var/home/v/devel/easyeffects/include/tags_schema.hpp:52:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.bassloudness";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:54:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/bassloudness/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:56:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/bassloudness/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:60:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::compressor {
              ^~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace compressor
/var/home/v/devel/easyeffects/include/tags_schema.hpp:62:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.compressor";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:64:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/compressor/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:66:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/compressor/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:70:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::convolver {
              ^~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace convolver
/var/home/v/devel/easyeffects/include/tags_schema.hpp:72:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.convolver";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:74:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/convolver/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:76:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/convolver/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:80:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::crossfeed {
              ^~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace crossfeed
/var/home/v/devel/easyeffects/include/tags_schema.hpp:82:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.crossfeed";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:84:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/crossfeed/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:86:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/crossfeed/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:90:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::crystalizer {
              ^~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace crystalizer
/var/home/v/devel/easyeffects/include/tags_schema.hpp:92:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.crystalizer";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:94:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/crystalizer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:96:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/crystalizer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:100:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::deesser {
              ^~~~~~~~~~~~~~~~~
               { namespace schema { namespace deesser
/var/home/v/devel/easyeffects/include/tags_schema.hpp:102:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.deesser";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:104:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/deesser/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:106:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/deesser/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:110:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::delay {
              ^~~~~~~~~~~~~~~
               { namespace schema { namespace delay
/var/home/v/devel/easyeffects/include/tags_schema.hpp:112:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.delay";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:114:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/delay/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:116:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/delay/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:120:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::echo_canceller {
              ^~~~~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace echo_canceller
/var/home/v/devel/easyeffects/include/tags_schema.hpp:122:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.echocanceller";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:124:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/echocanceller/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:126:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/echocanceller/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:130:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::equalizer {
              ^~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace equalizer
/var/home/v/devel/easyeffects/include/tags_schema.hpp:132:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.equalizer";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:134:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto channel_id = "com.github.wwmm.easyeffects.equalizer.channel";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:136:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/equalizer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:138:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/equalizer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:140:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path_left = "/com/github/wwmm/easyeffects/streaminputs/equalizer/leftchannel/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:142:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path_right = "/com/github/wwmm/easyeffects/streaminputs/equalizer/rightchannel/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:144:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path_left = "/com/github/wwmm/easyeffects/streamoutputs/equalizer/leftchannel/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:146:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path_right = "/com/github/wwmm/easyeffects/streamoutputs/equalizer/rightchannel/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:150:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::exciter {
              ^~~~~~~~~~~~~~~~~
               { namespace schema { namespace exciter
/var/home/v/devel/easyeffects/include/tags_schema.hpp:152:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.exciter";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:154:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/exciter/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:156:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/exciter/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:160:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::filter {
              ^~~~~~~~~~~~~~~~
               { namespace schema { namespace filter
/var/home/v/devel/easyeffects/include/tags_schema.hpp:162:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.filter";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:164:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/filter/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:166:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/filter/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:170:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::gate {
              ^~~~~~~~~~~~~~
               { namespace schema { namespace gate
/var/home/v/devel/easyeffects/include/tags_schema.hpp:172:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.gate";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:174:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/gate/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:176:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/gate/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:180:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::limiter {
              ^~~~~~~~~~~~~~~~~
               { namespace schema { namespace limiter
/var/home/v/devel/easyeffects/include/tags_schema.hpp:182:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.limiter";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:184:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/limiter/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:186:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/limiter/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:190:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::loudness {
              ^~~~~~~~~~~~~~~~~~
               { namespace schema { namespace loudness
/var/home/v/devel/easyeffects/include/tags_schema.hpp:192:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.loudness";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:194:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/loudness/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:196:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/loudness/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:200:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::maximizer {
              ^~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace maximizer
/var/home/v/devel/easyeffects/include/tags_schema.hpp:202:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.maximizer";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:204:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/maximizer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:206:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/maximizer/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:210:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::multiband_compressor {
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace multiband_compressor
/var/home/v/devel/easyeffects/include/tags_schema.hpp:212:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.multibandcompressor";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:214:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/multibandcompressor/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:216:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/multibandcompressor/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:220:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::multiband_gate {
              ^~~~~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace multiband_gate
/var/home/v/devel/easyeffects/include/tags_schema.hpp:222:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.multibandgate";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:224:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/multibandgate/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:226:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/multibandgate/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:230:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::output_level {
              ^~~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace output_level
/var/home/v/devel/easyeffects/include/tags_schema.hpp:232:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.outputlevel";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:236:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::pitch {
              ^~~~~~~~~~~~~~~
               { namespace schema { namespace pitch
/var/home/v/devel/easyeffects/include/tags_schema.hpp:238:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.pitch";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:240:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/pitch/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:242:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/pitch/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:246:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::reverb {
              ^~~~~~~~~~~~~~~~
               { namespace schema { namespace reverb
/var/home/v/devel/easyeffects/include/tags_schema.hpp:248:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.reverb";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:250:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/reverb/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:252:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/reverb/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:256:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::rnnoise {
              ^~~~~~~~~~~~~~~~~
               { namespace schema { namespace rnnoise
/var/home/v/devel/easyeffects/include/tags_schema.hpp:258:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.rnnoise";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:260:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/rnnoise/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:262:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/rnnoise/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:266:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::stereo_tools {
              ^~~~~~~~~~~~~~~~~~~~~~
               { namespace schema { namespace stereo_tools
/var/home/v/devel/easyeffects/include/tags_schema.hpp:268:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.stereotools";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:270:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto input_path = "/com/github/wwmm/easyeffects/streaminputs/stereotools/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:272:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto output_path = "/com/github/wwmm/easyeffects/streamoutputs/stereotools/";
^
/var/home/v/devel/easyeffects/include/tags_schema.hpp:276:15: warning: nested namespace definition is a C++17 extension; define each namespace separately [clang-diagnostic-c++17-extensions]
namespace tags::schema::spectrum {
              ^~~~~~~~~~~~~~~~~~
               { namespace schema { namespace spectrum
/var/home/v/devel/easyeffects/include/tags_schema.hpp:278:1: warning: inline variables are a C++17 extension [clang-diagnostic-c++17-extensions]
inline constexpr auto id = "com.github.wwmm.easyeffects.spectrum";
^
/var/home/v/devel/easyeffects/include/test_signals.hpp:22:10: error: 'pipewire/filter.h' file not found [clang-diagnostic-error]
#include <pipewire/filter.h>
         ^~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/include/ui_helpers.hpp:22:10: error: 'adwaita.h' file not found [clang-diagnostic-error]
#include <adwaita.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/util.hpp:22:10: error: 'gdk/gdk.h' file not found [clang-diagnostic-error]
#include <gdk/gdk.h>
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/include/util.hpp:116:6: warning: variable 'idle_add' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void idle_add(std::function<void()> cb);
     ^
/var/home/v/devel/easyeffects/include/util.hpp:162:16: warning: variable 'max' is not initialized [cppcoreguidelines-init-variables]
  const size_t max = std::numeric_limits<T>::digits10 + std::numeric_limits<T>::max_digits10 + 10u;
               ^
                   = 0
/var/home/v/devel/easyeffects/src/app_info.cpp:20:10: error: 'app_info.hpp' file not found [clang-diagnostic-error]
#include "app_info.hpp"
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/app_info.cpp:26:8: warning: constructor does not initialize these fields: application, info, handler_id_enable, handler_id_volume, handler_id_mute, handler_id_blocklist, enabled_app_list [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/app_info.cpp:26:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/app_info.cpp:28:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/app_info.cpp:39:8: warning: declaration uses identifier '_AppInfo', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _AppInfo {
       ^~~~~~~~
       AppInfo
/var/home/v/devel/easyeffects/src/app_info.cpp:39:8: warning: constructor does not initialize these fields: parent_instance, app_icon, app_name, media_name, format, rate, channels, latency, state, mute, volume, blocklist, enable, icon_theme, settings, app_settings, data [cppcoreguidelines-pro-type-member-init]
struct _AppInfo {
       ^
/var/home/v/devel/easyeffects/src/app_info.cpp:59:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(AppInfo, app_info, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/app_info.cpp:90:15: warning: variable 'icon_name' is not initialized [cppcoreguidelines-init-variables]
  std::string icon_name;
              ^
                        = 0
/var/home/v/devel/easyeffects/src/app_info.cpp:92:41: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (!node_info.app_icon_name.empty()) {
                                        ^
/var/home/v/devel/easyeffects/src/app_info.cpp:94:4: note: end of the original
  } else if (!node_info.media_icon_name.empty()) {
   ^
/var/home/v/devel/easyeffects/src/app_info.cpp:94:50: note: clone 1 starts here
  } else if (!node_info.media_icon_name.empty()) {
                                                 ^
/var/home/v/devel/easyeffects/src/app_info.cpp:96:39: note: clone 2 starts here
  } else if (!node_info.name.empty()) {
                                      ^
/var/home/v/devel/easyeffects/src/app_info.cpp:143:66: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (media_class == tags::pipewire::media_class::output_stream) {
                                                                 ^
/var/home/v/devel/easyeffects/src/app_info.cpp:145:4: note: end of the original
  } else if (media_class == tags::pipewire::media_class::input_stream) {
   ^
/var/home/v/devel/easyeffects/src/app_info.cpp:145:72: note: clone 1 starts here
  } else if (media_class == tags::pipewire::media_class::input_stream) {
                                                                       ^
/var/home/v/devel/easyeffects/src/app_info.cpp:185:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (state) {
  ^
/var/home/v/devel/easyeffects/src/app_info.cpp:187:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/app_info.cpp:199:15: warning: variable 'app_tag' is not initialized [cppcoreguidelines-init-variables]
  std::string app_tag = self->data->info.application_id;
              ^
                      = 0
/var/home/v/devel/easyeffects/src/app_info.cpp:205:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (is_blocklisted) {
  ^
/var/home/v/devel/easyeffects/src/app_info.cpp:209:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/app_info.cpp:246:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (g_settings_get_boolean(self->app_settings, "use-cubic-volumes") != 0) {
  ^
/var/home/v/devel/easyeffects/src/app_info.cpp:248:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/app_info.cpp:258:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (node_info.mute) {
  ^
/var/home/v/devel/easyeffects/src/app_info.cpp:260:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/app_info.cpp:270:106: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (const auto default_app_icon = "ee-applications-multimedia-symbolic"s; self->icon_theme == nullptr) {
                                                                                                         ^
/var/home/v/devel/easyeffects/src/app_info.cpp:272:4: note: end of the original
  } else if (const auto icon_name = get_app_icon_name(node_info); icon_name.empty()) {
   ^
/var/home/v/devel/easyeffects/src/app_info.cpp:272:86: note: clone 1 starts here
  } else if (const auto icon_name = get_app_icon_name(node_info); icon_name.empty()) {
                                                                                     ^
/var/home/v/devel/easyeffects/src/app_info.cpp:274:48: note: clone 2 starts here
  } else if (!icon_available(self, icon_name)) {
                                               ^
/var/home/v/devel/easyeffects/src/app_info.cpp:276:10: note: clone 3 starts here
  } else {
         ^
/var/home/v/devel/easyeffects/src/app_info.cpp:295:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(AppInfo* self,
     ^
/var/home/v/devel/easyeffects/src/application.cpp:20:10: error: 'application.hpp' file not found [clang-diagnostic-error]
#include "application.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/application.cpp:27:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(Application, application, ADW_TYPE_APPLICATION)
^
/var/home/v/devel/easyeffects/src/application.cpp:30:9: warning: variable 'list' is not initialized [cppcoreguidelines-init-variables]
  auto* list = gtk_application_get_windows(GTK_APPLICATION(app));
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application.cpp:33:11: warning: variable 'window' is not initialized [cppcoreguidelines-init-variables]
    auto* window = list->data;
          ^
                 = nullptr
/var/home/v/devel/easyeffects/src/application.cpp:34:11: warning: variable 'next' is not initialized [cppcoreguidelines-init-variables]
    auto* next = list->next;
          ^
               = nullptr
/var/home/v/devel/easyeffects/src/application.cpp:54:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP(gapp);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application.cpp:226:9: warning: variable 'application_class' is not initialized [cppcoreguidelines-init-variables]
  auto* application_class = G_APPLICATION_CLASS(klass);
        ^
                          = nullptr
/var/home/v/devel/easyeffects/src/application.cpp:499:9: warning: variable 'app' is not initialized [cppcoreguidelines-init-variables]
  auto* app = g_object_new(EE_TYPE_APPLICATION, "application-id", tags::app::id, "flags",
        ^
            = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:20:10: error: 'application_ui.hpp' file not found [clang-diagnostic-error]
#include "application_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/application_ui.cpp:26:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/application_ui.cpp:28:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/application_ui.cpp:41:8: warning: declaration uses identifier '_ApplicationWindow', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _ApplicationWindow {
       ^~~~~~~~~~~~~~~~~~
       ApplicationWindow
/var/home/v/devel/easyeffects/src/application_ui.cpp:41:8: warning: constructor does not initialize these fields: parent_instance, stack, presets_menu_button, bypass_button, presetsMenu, soe_ui, sie_ui, pm_box, settings, data [cppcoreguidelines-pro-type-member-init]
struct _ApplicationWindow {
       ^
/var/home/v/devel/easyeffects/src/application_ui.cpp:60:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(ApplicationWindow, application_window, ADW_TYPE_APPLICATION_WINDOW)
^
/var/home/v/devel/easyeffects/src/application_ui.cpp:63:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (g_settings_get_boolean(self->settings, "use-dark-theme") == 0) {
  ^
/var/home/v/devel/easyeffects/src/application_ui.cpp:65:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/application_ui.cpp:79:9: warning: variable 'name' is not initialized [cppcoreguidelines-init-variables]
  auto* name = gtk_icon_theme_get_theme_name(icon_theme);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:81:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (name == nullptr) {
  ^
/var/home/v/devel/easyeffects/src/application_ui.cpp:83:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/application_ui.cpp:104:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP_WINDOW(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:125:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP_WINDOW(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:135:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP_WINDOW(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:137:20: warning: variable 'new_state' is not initialized [cppcoreguidelines-init-variables]
  GdkToplevelState new_state = GDK_TOPLEVEL_STATE_MAXIMIZED;
                   ^
                             = 0
/var/home/v/devel/easyeffects/src/application_ui.cpp:151:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP_WINDOW(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:172:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP_WINDOW(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:187:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP_WINDOW(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:207:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APP_WINDOW(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:217:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:218:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:265:9: warning: variable 'soe_ui_page' is not initialized [cppcoreguidelines-init-variables]
  auto* soe_ui_page = adw_view_stack_add_titled(self->stack, GTK_WIDGET(self->soe_ui), "stream_output", _("Output"));
        ^
                    = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:266:9: warning: variable 'sie_ui_page' is not initialized [cppcoreguidelines-init-variables]
  auto* sie_ui_page = adw_view_stack_add_titled(self->stack, GTK_WIDGET(self->sie_ui), "stream_input", _("Input"));
        ^
                    = nullptr
/var/home/v/devel/easyeffects/src/application_ui.cpp:267:9: warning: variable 'pm_box_page' is not initialized [cppcoreguidelines-init-variables]
  auto* pm_box_page = adw_view_stack_add_titled(self->stack, GTK_WIDGET(self->pm_box), "page_pipewire", _("PipeWire"));
        ^
                    = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:20:10: error: 'apps_box.hpp' file not found [clang-diagnostic-error]
#include "apps_box.hpp"
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/apps_box.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:37:8: warning: declaration uses identifier '_AppsBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _AppsBox {
       ^~~~~~~~
       AppsBox
/var/home/v/devel/easyeffects/src/apps_box.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, overlay, overlay_empty_list, listview, icon_theme, apps_model, all_apps_model, settings, app_settings, data [cppcoreguidelines-pro-type-member-init]
struct _AppsBox {
       ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(AppsBox, apps_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/apps_box.cpp:64:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (g_list_model_get_n_items(G_LIST_MODEL(self->apps_model)) == 0) {
  ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:66:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:87:9: warning: variable 'holder' is not initialized [cppcoreguidelines-init-variables]
  auto* holder = ui::holders::create(node_info);
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:161:66: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (media_class == tags::pipewire::media_class::output_stream) {
                                                                 ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:163:4: note: end of the original
  } else if (media_class == tags::pipewire::media_class::input_stream) {
   ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:163:72: note: clone 1 starts here
  } else if (media_class == tags::pipewire::media_class::input_stream) {
                                                                       ^
/var/home/v/devel/easyeffects/src/apps_box.cpp:229:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_no_selection_new(G_LIST_MODEL(self->apps_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:242:13: warning: variable 'pm' is not initialized [cppcoreguidelines-init-variables]
      auto* pm = application->sie->pm;
            ^
               = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:264:13: warning: variable 'pm' is not initialized [cppcoreguidelines-init-variables]
      auto* pm = application->soe->pm;
            ^
               = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:374:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APPS_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:397:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_APPS_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:407:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/apps_box.cpp:408:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/autogain.cpp:20:10: error: 'autogain.hpp' file not found [clang-diagnostic-error]
#include "autogain.hpp"
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/autogain_preset.cpp:20:10: error: 'autogain_preset.hpp' file not found [clang-diagnostic-error]
#include "autogain_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:20:10: error: 'autogain_ui.hpp' file not found [clang-diagnostic-error]
#include "autogain_ui.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:24:8: warning: constructor does not initialize these fields: autogain, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:37:8: warning: declaration uses identifier '_AutogainBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _AutogainBox {
       ^~~~~~~~~~~~
       AutogainBox
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, target, maximum_history, m_level, s_level, i_level, r_level, g_level, l_level, lra_level, m_label, s_label, i_label, r_label, g_label, l_label, lra_label, reset_history, reference, settings, data [cppcoreguidelines-pro-type-member-init]
struct _AutogainBox {
       ^
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:61:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(AutogainBox, autogain_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/autogain_ui.cpp:73:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(AutogainBox* self, std::shared_ptr<AutoGain> autogain, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/bass_enhancer.cpp:20:10: error: 'bass_enhancer.hpp' file not found [clang-diagnostic-error]
#include "bass_enhancer.hpp"
         ^~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/bass_enhancer_preset.cpp:20:10: error: 'bass_enhancer_preset.hpp' file not found [clang-diagnostic-error]
#include "bass_enhancer_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:20:10: error: 'bass_enhancer_ui.hpp' file not found [clang-diagnostic-error]
#include "bass_enhancer_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:24:8: warning: constructor does not initialize these fields: bass_enhancer, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:37:8: warning: declaration uses identifier '_BassEnhancerBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _BassEnhancerBox {
       ^~~~~~~~~~~~~~~~
       BassEnhancerBox
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, harmonics_levelbar, harmonics_levelbar_label, floor, amount, harmonics, scope, blend, floor_active, listen, settings, data [cppcoreguidelines-pro-type-member-init]
struct _BassEnhancerBox {
       ^
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:61:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(BassEnhancerBox, bass_enhancer_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/bass_enhancer_ui.cpp:67:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(BassEnhancerBox* self, std::shared_ptr<BassEnhancer> bass_enhancer, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/bass_loudness.cpp:20:10: error: 'bass_loudness.hpp' file not found [clang-diagnostic-error]
#include "bass_loudness.hpp"
         ^~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/bass_loudness_preset.cpp:20:10: error: 'bass_loudness_preset.hpp' file not found [clang-diagnostic-error]
#include "bass_loudness_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:20:10: error: 'bass_loudness_ui.hpp' file not found [clang-diagnostic-error]
#include "bass_loudness_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:24:8: warning: constructor does not initialize these fields: bass_loudness, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:37:8: warning: declaration uses identifier '_BassLoudnessBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _BassLoudnessBox {
       ^~~~~~~~~~~~~~~~
       BassLoudnessBox
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, loudness, output, link, settings, data [cppcoreguidelines-pro-type-member-init]
struct _BassLoudnessBox {
       ^
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:53:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(BassLoudnessBox, bass_loudness_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/bass_loudness_ui.cpp:59:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(BassLoudnessBox* self, std::shared_ptr<BassLoudness> bass_loudness, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:20:10: error: 'blocklist_menu.hpp' file not found [clang-diagnostic-error]
#include "blocklist_menu.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:35:8: warning: declaration uses identifier '_BlocklistMenu', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _BlocklistMenu {
       ^~~~~~~~~~~~~~
       BlocklistMenu
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:35:8: warning: constructor does not initialize these fields: parent_instance, scrolled_window, listview, app_name, show_blocklisted_apps, string_list, settings, app_settings, data [cppcoreguidelines-pro-type-member-init]
struct _BlocklistMenu {
       ^
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:53:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(BlocklistMenu, blocklist_menu, GTK_TYPE_POPOVER)
^
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:162:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_BLOCKLIST_MENU(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:164:9: warning: variable 'active_window' is not initialized [cppcoreguidelines-init-variables]
  auto* active_window = gtk_application_get_active_window(GTK_APPLICATION(self->data->application));
        ^
                      = nullptr
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:168:13: warning: variable 'menu_height' is not initialized [cppcoreguidelines-init-variables]
  const int menu_height = static_cast<int>(0.5F * static_cast<float>(active_window_height));
            ^
                        = 0
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:176:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_BLOCKLIST_MENU(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:198:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_BLOCKLIST_MENU(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:208:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/blocklist_menu.cpp:209:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:20:10: error: 'chart.hpp' file not found [clang-diagnostic-error]
#include "chart.hpp"
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/src/chart.cpp:26:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/chart.cpp:28:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/chart.cpp:51:8: warning: declaration uses identifier '_Chart', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _Chart {
       ^~~~~~
       Chart
/var/home/v/devel/easyeffects/src/chart.cpp:51:8: warning: constructor does not initialize these fields: parent_instance, controller_motion, data [cppcoreguidelines-pro-type-member-init]
struct _Chart {
       ^
/var/home/v/devel/easyeffects/src/chart.cpp:59:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(Chart, chart, GTK_TYPE_WIDGET)
^
/var/home/v/devel/easyeffects/src/chart.cpp:162:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (std::fabs(self->data->y_max - self->data->y_min) < 0.00001F) {
  ^
/var/home/v/devel/easyeffects/src/chart.cpp:164:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/chart.cpp:193:21: warning: variable 'mouse_x_log' is not initialized [cppcoreguidelines-init-variables]
        const float mouse_x_log = (x - self->data->margin * width) / width -
                    ^
                                = NAN
/var/home/v/devel/easyeffects/src/chart.cpp:215:9: warning: variable 'layout' is not initialized [cppcoreguidelines-init-variables]
  auto* layout = gtk_widget_create_pango_layout(GTK_WIDGET(self), unit.c_str());
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:241:32: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
  float labels_offset = 0.1F * width;
                               ^
/var/home/v/devel/easyeffects/src/chart.cpp:243:7: warning: variable 'n_x_labels' is not initialized [cppcoreguidelines-init-variables]
  int n_x_labels = static_cast<int>(std::ceil((width - 2 * self->data->margin * width) / labels_offset)) + 1;
      ^
                 = 0
/var/home/v/devel/easyeffects/src/chart.cpp:315:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CHART(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:345:11: warning: variable 'usable_width' is not initialized [cppcoreguidelines-init-variables]
    float usable_width = width_f - 2.0F * (self->data->line_width + self->data->margin * width_f);
          ^
                       = NAN
/var/home/v/devel/easyeffects/src/chart.cpp:375:11: warning: variable 'radius' is not initialized [cppcoreguidelines-init-variables]
    float radius = (self->data->rounded_corners == true) ? 5.0F : 0.0F;
          ^
                 = NAN
/var/home/v/devel/easyeffects/src/chart.cpp:379:15: warning: variable 'dw' is not initialized [cppcoreguidelines-init-variables]
        float dw = width_f / static_cast<float>(n_points);
              ^
                 = NAN
/var/home/v/devel/easyeffects/src/chart.cpp:413:15: warning: variable 'dw' is not initialized [cppcoreguidelines-init-variables]
        float dw = width_f / static_cast<float>(n_points);
              ^
                 = NAN
/var/home/v/devel/easyeffects/src/chart.cpp:448:15: warning: variable 'ctx' is not initialized [cppcoreguidelines-init-variables]
        auto* ctx = gtk_snapshot_append_cairo(snapshot, &widget_rectangle);
              ^
                  = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:483:9: warning: if with identical then and else branches [bugprone-branch-clone]
        if (self->data->fill_bars) {
        ^
/var/home/v/devel/easyeffects/src/chart.cpp:485:11: note: else branch starts here
        } else {
          ^
/var/home/v/devel/easyeffects/src/chart.cpp:501:13: warning: variable 'layout' is not initialized [cppcoreguidelines-init-variables]
      auto* layout = gtk_widget_create_pango_layout(GTK_WIDGET(self), msg.c_str());
            ^
                   = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:529:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CHART(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:537:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CHART(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:547:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/chart.cpp:548:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:20:10: error: 'client_info_holder.hpp' file not found [clang-diagnostic-error]
#include "client_info_holder.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:26:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(ClientInfoHolder, client_info_holder, G_TYPE_OBJECT);
^
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:29:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CLIENT_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:32:5: warning: switch has 5 consecutive identical branches [bugprone-branch-clone]
    case PROP_ID:
    ^
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:46:12: note: last of these clones ends here
      break;
           ^
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:51:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CLIENT_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:54:5: warning: switch has 5 consecutive identical branches [bugprone-branch-clone]
    case PROP_ID:
    ^
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:68:12: note: last of these clones ends here
      break;
           ^
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:73:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CLIENT_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:85:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/client_info_holder.cpp:110:9: warning: variable 'holder' is not initialized [cppcoreguidelines-init-variables]
  auto* holder = static_cast<ClientInfoHolder*>(g_object_new(EE_TYPE_CLIENT_INFO_HOLDER, nullptr));
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/compressor.cpp:20:10: error: 'compressor.hpp' file not found [clang-diagnostic-error]
#include "compressor.hpp"
         ^~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/compressor_preset.cpp:20:10: error: 'compressor_preset.hpp' file not found [clang-diagnostic-error]
#include "compressor_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:20:10: error: 'compressor_ui.hpp' file not found [clang-diagnostic-error]
#include "compressor_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:24:8: warning: constructor does not initialize these fields: compressor, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:37:8: warning: declaration uses identifier '_CompressorBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _CompressorBox {
       ^~~~~~~~~~~~~~
       CompressorBox
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, gain_label, sidechain_label, curve_label, envelope_label, attack, release, release_threshold, threshold, knee, ratio, makeup, dry, wet, boost_threshold, boost_amount, preamp, reactivity, lookahead, hpf_freq, lpf_freq, compression_mode, sidechain_type, sidechain_mode, sidechain_source, lpf_mode, hpf_mode, listen, dropdown_input_devices, input_devices_model, settings, data [cppcoreguidelines-pro-type-member-init]
struct _CompressorBox {
       ^
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:64:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(CompressorBox, compressor_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:70:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
gboolean set_dropdown_sensitive(CompressorBox* self, const char* active_id) {
         ^
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:78:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
gboolean set_boost_threshold_sensitive(CompressorBox* self, const char* active_id) {
         ^
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:81:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (g_strcmp0(active_id, "Upward") == 0) {
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:88:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
gboolean set_boost_amount_sensitive(CompressorBox* self, const char* active_id) {
         ^
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:91:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (g_strcmp0(active_id, "Boosting") == 0) {
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:99:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_single_selection_new(G_LIST_MODEL(self->input_devices_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/compressor_ui.cpp:116:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(CompressorBox* self,
     ^
/var/home/v/devel/easyeffects/src/convolver.cpp:20:10: error: 'convolver.hpp' file not found [clang-diagnostic-error]
#include "convolver.hpp"
         ^~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:20:10: error: 'convolver_menu_combine.hpp' file not found [clang-diagnostic-error]
#include "convolver_menu_combine.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:28:30: warning: variable 'irs_dir' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static std::filesystem::path irs_dir = g_get_user_config_dir() + "/easyeffects/irs"s;
                             ^
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:30:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:32:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:37:8: warning: declaration uses identifier '_ConvolverMenuCombine', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _ConvolverMenuCombine {
       ^~~~~~~~~~~~~~~~~~~~~
       ConvolverMenuCombine
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, dropdown_kernel_1, dropdown_kernel_2, output_kernel_name, spinner, string_list_1, string_list_2, app_settings, data [cppcoreguidelines-pro-type-member-init]
struct _ConvolverMenuCombine {
       ^
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:53:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(ConvolverMenuCombine, convolver_menu_combine, GTK_TYPE_POPOVER)
^
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:129:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (kernel_1_L.size() > kernel_2_L.size()) {
  ^
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:132:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:179:15: warning: variable 'output_name' is not initialized [cppcoreguidelines-init-variables]
  std::string output_name = gtk_editable_get_text(GTK_EDITABLE(self->output_kernel_name));
              ^
                          = 0
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:209:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CONVOLVER_MENU_COMBINE(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:225:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CONVOLVER_MENU_COMBINE(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:235:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_combine.cpp:236:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:20:10: error: 'convolver_menu_impulses.hpp' file not found [clang-diagnostic-error]
#include "convolver_menu_impulses.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:30:30: warning: variable 'irs_dir' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static std::filesystem::path irs_dir = g_get_user_config_dir() + "/easyeffects/irs"s;
                             ^
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:32:8: warning: declaration uses identifier '_ConvolverMenuImpulses', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _ConvolverMenuImpulses {
       ^~~~~~~~~~~~~~~~~~~~~~
       ConvolverMenuImpulses
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:32:8: warning: constructor does not initialize these fields: parent_instance, scrolled_window, listview, ir_width, entry_search, string_list, settings, app_settings, application [cppcoreguidelines-pro-type-member-init]
struct _ConvolverMenuImpulses {
       ^
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:50:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(ConvolverMenuImpulses, convolver_menu_impulses, GTK_TYPE_POPOVER)
^
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:61:25: warning: variable 'p' is not initialized [cppcoreguidelines-init-variables]
  std::filesystem::path p{file_path};
                        ^
                          = 0
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:76:5: warning: do not use 'else' after 'return' [readability-else-after-return]
  } else if (file.channels() != 2) {
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:95:15: warning: variable 'descr' is not initialized [cppcoreguidelines-init-variables]
  std::string descr;
              ^
                    = 0
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:98:5: warning: switch has 3 consecutive identical branches [bugprone-branch-clone]
    case ImpulseImportState::no_regular_file: {
    ^
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:112:6: note: last of these clones ends here
    }
     ^
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:117:9: warning: variable 'active_window' is not initialized [cppcoreguidelines-init-variables]
  auto* active_window = gtk_application_get_active_window(GTK_APPLICATION(self->application));
        ^
                      = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:123:9: warning: variable 'active_window' is not initialized [cppcoreguidelines-init-variables]
  auto* active_window = gtk_application_get_active_window(GTK_APPLICATION(self->application));
        ^
                      = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:125:9: warning: variable 'dialog' is not initialized [cppcoreguidelines-init-variables]
  auto* dialog = gtk_file_chooser_native_new(_("Import Impulse File"), active_window, GTK_FILE_CHOOSER_ACTION_OPEN,
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:166:29: warning: variable 'irs_file' is not initialized [cppcoreguidelines-init-variables]
    std::filesystem::remove(irs_file);
                            ^
                                     = 0
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:260:9: warning: variable 'filter' is not initialized [cppcoreguidelines-init-variables]
  auto* filter = gtk_string_filter_new(gtk_property_expression_new(GTK_TYPE_STRING_OBJECT, nullptr, "string"));
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:262:9: warning: variable 'filter_model' is not initialized [cppcoreguidelines-init-variables]
  auto* filter_model = gtk_filter_list_model_new(G_LIST_MODEL(self->string_list), GTK_FILTER(filter));
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:270:9: warning: variable 'sorter' is not initialized [cppcoreguidelines-init-variables]
  auto* sorter = gtk_string_sorter_new(gtk_property_expression_new(GTK_TYPE_STRING_OBJECT, nullptr, "string"));
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:272:9: warning: variable 'sorter_model' is not initialized [cppcoreguidelines-init-variables]
  auto* sorter_model = gtk_sort_list_model_new(G_LIST_MODEL(filter_model), GTK_SORTER(sorter));
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:276:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_no_selection_new(G_LIST_MODEL(sorter_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:292:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CONVOLVER_MENU_IMPULSES(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:294:9: warning: variable 'active_window' is not initialized [cppcoreguidelines-init-variables]
  auto* active_window = gtk_application_get_active_window(GTK_APPLICATION(self->application));
        ^
                      = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:298:13: warning: variable 'menu_height' is not initialized [cppcoreguidelines-init-variables]
  const int menu_height = static_cast<int>(0.5F * static_cast<float>(active_window_height));
            ^
                        = 0
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:306:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_CONVOLVER_MENU_IMPULSES(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:317:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/convolver_menu_impulses.cpp:318:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/convolver_preset.cpp:20:10: error: 'convolver_preset.hpp' file not found [clang-diagnostic-error]
#include "convolver_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:20:10: error: 'convolver_ui.hpp' file not found [clang-diagnostic-error]
#include "convolver_ui.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:28:30: warning: variable 'irs_dir' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static std::filesystem::path irs_dir = g_get_user_config_dir() + "/easyeffects/irs"s;
                             ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:30:8: warning: constructor does not initialize these fields: application, convolver, lock_guard_irs_info, mythreads, connections, gconnections, left_mag, right_mag, time_axis, left_spectrum, right_spectrum, freq_axis [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:30:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:32:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:51:8: warning: declaration uses identifier '_ConvolverBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _ConvolverBox {
       ^~~~~~~~~~~~~
       ConvolverBox
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:51:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, menu_button_impulses, menu_button_combine, label_file_name, label_sampling_rate, label_samples, label_duration, ir_width, check_left, check_right, show_fft, enable_log_scale, chart_box, impulses_menu, combine_menu, chart, settings, folder_monitor, data, autogain [cppcoreguidelines-pro-type-member-init]
struct _ConvolverBox {
       ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:87:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(ConvolverBox, convolver_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:107:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (gtk_toggle_button_get_active(self->enable_log_scale) != 0) {
  ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:109:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:115:59: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (gtk_check_button_get_active(self->check_left) != 0) {
                                                          ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:117:4: note: end of the original
  } else if (gtk_check_button_get_active(self->check_right) != 0) {
   ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:117:67: note: clone 1 starts here
  } else if (gtk_check_button_get_active(self->check_right) != 0) {
                                                                  ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:137:59: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (gtk_check_button_get_active(self->check_left) != 0) {
                                                          ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:139:4: note: end of the original
  } else if (gtk_check_button_get_active(self->check_right) != 0) {
   ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:139:67: note: clone 1 starts here
  } else if (gtk_check_button_get_active(self->check_right) != 0) {
                                                                  ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:145:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (gtk_toggle_button_get_active(btn) != 0) {
  ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:147:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:186:9: warning: variable 'complex_output' is not initialized [cppcoreguidelines-init-variables]
  auto* complex_output = fftwf_alloc_complex(real_input.size());
        ^
                       = nullptr
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:188:9: warning: variable 'plan' is not initialized [cppcoreguidelines-init-variables]
  auto* plan =
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:247:10: warning: variable 'bin_size' is not initialized [cppcoreguidelines-init-variables]
  size_t bin_size =
         ^
                  = 0
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:252:9: warning: variable 'max_freq' is not initialized [cppcoreguidelines-init-variables]
  float max_freq = std::ranges::max(self->data->freq_axis);
        ^
                 = NAN
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:253:9: warning: variable 'min_freq' is not initialized [cppcoreguidelines-init-variables]
  float min_freq = std::ranges::min(self->data->freq_axis);
        ^
                 = NAN
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:269:10: warning: variable 'last_j' is not initialized [cppcoreguidelines-init-variables]
  size_t last_j = 0;
         ^
                = 0
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:315:21: warning: variable 'path' is not initialized [cppcoreguidelines-init-variables]
  const std::string path = util::gsettings_get_string(self->settings, "kernel-path");
                    ^
                         = 0
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:355:15: warning: variable 'dt' is not initialized [cppcoreguidelines-init-variables]
  const float dt = 1.0F / static_cast<float>(rate);
              ^
                 = NAN
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:357:15: warning: variable 'duration' is not initialized [cppcoreguidelines-init-variables]
  const float duration = (static_cast<float>(kernel_L.size()) - 1.0F) * dt;
              ^
                       = NAN
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:370:10: warning: variable 'bin_size' is not initialized [cppcoreguidelines-init-variables]
  size_t bin_size = (gtk_widget_get_width(GTK_WIDGET(self->chart)) > 0)
         ^
                  = 0
/var/home/v/devel/easyeffects/src/convolver_ui.cpp:461:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(ConvolverBox* self,
     ^
/var/home/v/devel/easyeffects/src/convolver_ui_common.cpp:20:10: error: 'convolver_ui_common.hpp' file not found [clang-diagnostic-error]
#include "convolver_ui_common.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/crossfeed.cpp:20:10: error: 'crossfeed.hpp' file not found [clang-diagnostic-error]
#include "crossfeed.hpp"
         ^~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/crossfeed_preset.cpp:20:10: error: 'crossfeed_preset.hpp' file not found [clang-diagnostic-error]
#include "crossfeed_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:20:10: error: 'crossfeed_ui.hpp' file not found [clang-diagnostic-error]
#include "crossfeed_ui.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:24:8: warning: constructor does not initialize these fields: crossfeed, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:37:8: warning: declaration uses identifier '_CrossfeedBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _CrossfeedBox {
       ^~~~~~~~~~~~~
       CrossfeedBox
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, fcut, feed, settings, data [cppcoreguidelines-pro-type-member-init]
struct _CrossfeedBox {
       ^
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:53:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(CrossfeedBox, crossfeed_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/crossfeed_ui.cpp:74:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(CrossfeedBox* self, std::shared_ptr<Crossfeed> crossfeed, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/crystalizer.cpp:20:10: error: 'crystalizer.hpp' file not found [clang-diagnostic-error]
#include "crystalizer.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/crystalizer_preset.cpp:20:10: error: 'crystalizer_preset.hpp' file not found [clang-diagnostic-error]
#include "crystalizer_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:20:10: error: 'crystalizer_ui.hpp' file not found [clang-diagnostic-error]
#include "crystalizer_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:26:8: warning: constructor does not initialize these fields: crystalizer, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:26:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:28:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:39:8: warning: declaration uses identifier '_CrystalizerBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _CrystalizerBox {
       ^~~~~~~~~~~~~~~
       CrystalizerBox
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:39:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, bands_box, settings, data [cppcoreguidelines-pro-type-member-init]
struct _CrystalizerBox {
       ^
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(CrystalizerBox, crystalizer_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/crystalizer_ui.cpp:134:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(CrystalizerBox* self, std::shared_ptr<Crystalizer> crystalizer, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/deesser.cpp:20:10: error: 'deesser.hpp' file not found [clang-diagnostic-error]
#include "deesser.hpp"
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/deesser_preset.cpp:20:10: error: 'deesser_preset.hpp' file not found [clang-diagnostic-error]
#include "deesser_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:20:10: error: 'deesser_ui.hpp' file not found [clang-diagnostic-error]
#include "deesser_ui.hpp"
         ^~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:24:8: warning: constructor does not initialize these fields: deesser, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:37:8: warning: declaration uses identifier '_DeesserBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _DeesserBox {
       ^~~~~~~~~~~
       DeesserBox
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, compression, detected, compression_label, detected_label, f1_freq, f2_freq, f1_level, f2_level, f2_q, threshold, ratio, laxity, makeup, sc_listen, detection, mode, settings, data [cppcoreguidelines-pro-type-member-init]
struct _DeesserBox {
       ^
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:61:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(DeesserBox, deesser_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/deesser_ui.cpp:67:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(DeesserBox* self, std::shared_ptr<Deesser> deesser, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/delay.cpp:20:10: error: 'delay.hpp' file not found [clang-diagnostic-error]
#include "delay.hpp"
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/src/delay_preset.cpp:20:10: error: 'delay_preset.hpp' file not found [clang-diagnostic-error]
#include "delay_preset.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/delay_ui.cpp:20:10: error: 'delay_ui.hpp' file not found [clang-diagnostic-error]
#include "delay_ui.hpp"
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/delay_ui.cpp:24:8: warning: constructor does not initialize these fields: delay, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/delay_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/delay_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/delay_ui.cpp:37:8: warning: declaration uses identifier '_DelayBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _DelayBox {
       ^~~~~~~~~
       DelayBox
/var/home/v/devel/easyeffects/src/delay_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, time_l, time_r, dry_l, dry_r, wet_l, wet_r, floor_active, listen, settings, data [cppcoreguidelines-pro-type-member-init]
struct _DelayBox {
       ^
/var/home/v/devel/easyeffects/src/delay_ui.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(DelayBox, delay_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/delay_ui.cpp:61:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(DelayBox* self, std::shared_ptr<Delay> delay, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/easyeffects.cpp:20:10: error: 'glib-unix.h' file not found [clang-diagnostic-error]
#include <glib-unix.h>
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/easyeffects.cpp:27:25: warning: variable 'app' is not initialized [cppcoreguidelines-init-variables]
  app::hide_all_windows(app);
                        ^
                            = 0
/var/home/v/devel/easyeffects/src/easyeffects.cpp:40:11: warning: variable 'bindtext_output' is not initialized [cppcoreguidelines-init-variables]
    auto* bindtext_output = bindtextdomain(GETTEXT_PACKAGE, LOCALE_DIR);
          ^
                          = nullptr
/var/home/v/devel/easyeffects/src/easyeffects.cpp:44:37: warning: repeated branch in conditional chain [bugprone-branch-clone]
    if (bindtext_output != nullptr) {
                                    ^
/var/home/v/devel/easyeffects/src/easyeffects.cpp:46:6: note: end of the original
    } else if (errno == ENOMEM) {
     ^
/var/home/v/devel/easyeffects/src/easyeffects.cpp:46:33: note: clone 1 starts here
    } else if (errno == ENOMEM) {
                                ^
/var/home/v/devel/easyeffects/src/easyeffects.cpp:52:11: warning: variable 'app' is not initialized [cppcoreguidelines-init-variables]
    auto* app = app::application_new();
          ^
              = nullptr
/var/home/v/devel/easyeffects/src/echo_canceller.cpp:20:10: error: 'echo_canceller.hpp' file not found [clang-diagnostic-error]
#include "echo_canceller.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/echo_canceller_preset.cpp:20:10: error: 'echo_canceller_preset.hpp' file not found [clang-diagnostic-error]
#include "echo_canceller_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:20:10: error: 'echo_canceller_ui.hpp' file not found [clang-diagnostic-error]
#include "echo_canceller_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:24:8: warning: constructor does not initialize these fields: echo_canceller, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:37:8: warning: declaration uses identifier '_EchoCancellerBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _EchoCancellerBox {
       ^~~~~~~~~~~~~~~~~
       EchoCancellerBox
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, frame_size, filter_length, settings, data [cppcoreguidelines-pro-type-member-init]
struct _EchoCancellerBox {
       ^
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:53:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(EchoCancellerBox, echo_canceller_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/echo_canceller_ui.cpp:59:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(EchoCancellerBox* self, std::shared_ptr<EchoCanceller> echo_canceller, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/effects_base.cpp:20:10: error: 'effects_base.hpp' file not found [clang-diagnostic-error]
#include "effects_base.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/effects_box.cpp:20:10: error: 'effects_box.hpp' file not found [clang-diagnostic-error]
#include "effects_box.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/effects_box.cpp:24:6: warning: variable 'schedule_signal_idle' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
bool schedule_signal_idle = false;
     ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:30:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:32:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:53:8: warning: declaration uses identifier '_EffectsBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _EffectsBox {
       ^~~~~~~~~~~
       EffectsBox
/var/home/v/devel/easyeffects/src/effects_box.cpp:53:8: warning: constructor does not initialize these fields: parent_instance, stack, apps_box_page, plugins_box_page, device_state, latency_status, label_global_output_level_left, label_global_output_level_right, toggle_listen_mic, menubutton_blocklist, saturation_icon, icon_theme, spectrum_chart, appsBox, pluginsBox, blocklist_menu, settings_spectrum, app_settings, data [cppcoreguidelines-pro-type-member-init]
struct _EffectsBox {
       ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:83:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(EffectsBox, effects_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/effects_box.cpp:149:29: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (chart_type == "Bars") {
                            ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:151:4: note: end of the original
  } else if (chart_type == "Lines") {
   ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:151:37: note: clone 1 starts here
  } else if (chart_type == "Lines") {
                                    ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:153:36: note: clone 2 starts here
  } else if (chart_type == "Dots") {
                                   ^
/var/home/v/devel/easyeffects/src/effects_box.cpp:241:15: warning: variable 'name' is not initialized [cppcoreguidelines-init-variables]
  const auto* name = adw_view_stack_get_visible_child_name(ADW_VIEW_STACK(stack));
              ^
                   = nullptr
/var/home/v/devel/easyeffects/src/effects_box.cpp:465:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_EFFECTS_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/effects_box.cpp:493:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_EFFECTS_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/effects_box.cpp:503:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/effects_box.cpp:504:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/equalizer.cpp:20:10: error: 'equalizer.hpp' file not found [clang-diagnostic-error]
#include "equalizer.hpp"
         ^~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:20:10: error: 'equalizer_band_box.hpp' file not found [clang-diagnostic-error]
#include "equalizer_band_box.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:33:8: warning: declaration uses identifier '_EqualizerBandBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _EqualizerBandBox {
       ^~~~~~~~~~~~~~~~~
       EqualizerBandBox
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:33:8: warning: constructor does not initialize these fields: parent_instance, band_type, band_mode, band_slope, reset_frequency, reset_quality, band_solo, band_mute, band_scale, band_frequency, band_quality, popover_menu, settings, app_settings, data [cppcoreguidelines-pro-type-member-init]
struct _EqualizerBandBox {
       ^
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:53:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(EqualizerBandBox, equalizer_band_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:68:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (value > 1000.0) {
  ^
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:70:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:129:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_EQUALIZER_BAND_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:145:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_EQUALIZER_BAND_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:155:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/equalizer_band_box.cpp:156:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/equalizer_preset.cpp:20:10: error: 'equalizer_preset.hpp' file not found [clang-diagnostic-error]
#include "equalizer_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:20:10: error: 'equalizer_ui.hpp' file not found [clang-diagnostic-error]
#include "equalizer_ui.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:30:8: warning: constructor does not initialize these fields: type, quality [cppcoreguidelines-pro-type-member-init]
struct APO_Band {
       ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:32:16: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  float freq = 1000.0f;
               ^     ~
                     F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:33:16: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
  float gain = 0.0f;
               ^  ~
                  F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:43:8: warning: constructor does not initialize these fields: application, equalizer, connections, gconnections, gconnections_left, gconnections_right [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:43:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:45:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:58:8: warning: declaration uses identifier '_EqualizerBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _EqualizerBox {
       ^~~~~~~~~~~~~
       EqualizerBox
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:58:8: warning: constructor does not initialize these fields: parent_instance, toast_overlay, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, stack, bands_box_left, bands_box_right, nbands, balance, pitch_left, pitch_right, mode, split_channels, settings, settings_left, settings_right, data [cppcoreguidelines-pro-type-member-init]
struct _EqualizerBox {
       ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:84:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(EqualizerBox, equalizer_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:112:16: warning: variable 'step' is not initialized [cppcoreguidelines-init-variables]
  const double step = std::pow(max_freq / min_freq, 1.0 / static_cast<double>(nbands));
               ^
                    = NAN
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:134:15: warning: variable 'matches' is not initialized [cppcoreguidelines-init-variables]
  std::smatch matches;
              ^
                      = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:148:15: warning: variable 'matches' is not initialized [cppcoreguidelines-init-variables]
  std::smatch matches;
              ^
                      = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:176:15: warning: variable 'matches' is not initialized [cppcoreguidelines-init-variables]
  std::smatch matches;
              ^
                      = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:192:15: warning: variable 'matches' is not initialized [cppcoreguidelines-init-variables]
  std::smatch matches;
              ^
                      = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:206:15: warning: variable 'matches' is not initialized [cppcoreguidelines-init-variables]
  std::smatch matches;
              ^
                      = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:232:78: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (filter_type == "PK" || filter_type == "MODAL" || filter_type == "PEQ") {
                                                                             ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:236:4: note: end of the original
  } else if (filter_type == "LP" || filter_type == "LPQ" || filter_type == "HP" || filter_type == "HPQ") {
   ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:236:106: note: clone 1 starts here
  } else if (filter_type == "LP" || filter_type == "LPQ" || filter_type == "HP" || filter_type == "HPQ") {
                                                                                                         ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:253:39: note: clone 2 starts here
  } else if (filter_type == "HS 6DB") {
                                      ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:258:40: note: clone 3 starts here
  } else if (filter_type == "HS 12DB") {
                                       ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:266:35: note: clone 4 starts here
  } else if (filter_type == "AP") {
                                  ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:242:24: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
      filter.quality = 2.0f / 3.0f;
                       ^  ~
                          F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:242:31: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
      filter.quality = 2.0f / 3.0f;
                              ^  ~
                                 F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:245:33: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
    filter.freq = filter.freq * 2.0f / 3.0f;
                                ^  ~
                                   F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:245:40: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
    filter.freq = filter.freq * 2.0f / 3.0f;
                                       ^  ~
                                          F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:250:33: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
    filter.freq = filter.freq * 3.0f / 2.0f;
                                ^  ~
                                   F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:250:40: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
    filter.freq = filter.freq * 3.0f / 2.0f;
                                       ^  ~
                                          F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:264:24: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
      filter.quality = 100.0f / 3.0f;
                       ^    ~
                            F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:264:33: warning: floating point literal has suffix 'f', which is not uppercase [readability-uppercase-literal-suffix]
      filter.quality = 100.0f / 3.0f;
                                ^  ~
                                   F
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:277:25: warning: variable 'p' is not initialized [cppcoreguidelines-init-variables]
  std::filesystem::path p{file_path};
                        ^
                          = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:283:17: warning: variable 'eq_file' is not initialized [cppcoreguidelines-init-variables]
  std::ifstream eq_file;
                ^
                        = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:312:70: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (g_settings_get_boolean(self->settings, "split-channels") == 0) {
                                                                     ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:315:4: note: end of the original
  } else if (g_strcmp0(gtk_stack_get_visible_child_name(self->stack), "page_left_channel") == 0) {
   ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:315:98: note: clone 1 starts here
  } else if (g_strcmp0(gtk_stack_get_visible_child_name(self->stack), "page_left_channel") == 0) {
                                                                                                 ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:317:10: note: clone 2 starts here
  } else {
         ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:321:19: warning: variable 'apo_bands' is not initialized [cppcoreguidelines-init-variables]
  for (int n = 0, apo_bands = static_cast<int>(bands.size()); n < max_bands; n++) {
                  ^
                            = 0
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:347:9: warning: variable 'active_window' is not initialized [cppcoreguidelines-init-variables]
  auto* active_window = gtk_application_get_active_window(GTK_APPLICATION(self->data->application));
        ^
                      = nullptr
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:349:9: warning: variable 'dialog' is not initialized [cppcoreguidelines-init-variables]
  auto* dialog = gtk_file_chooser_native_new(_("Import APO Preset File"), active_window, GTK_FILE_CHOOSER_ACTION_OPEN,
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:387:14: warning: variable 'settings' is not initialized [cppcoreguidelines-init-variables]
  GSettings* settings;
             ^
                      = nullptr
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:388:11: warning: variable 'bands_box' is not initialized [cppcoreguidelines-init-variables]
  GtkBox* bands_box;
          ^
                    = nullptr
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:390:43: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if constexpr (channel == Channel::left) {
                                          ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:394:4: note: end of the original
  } else if constexpr (channel == Channel::right) {
   ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:394:51: note: clone 1 starts here
  } else if constexpr (channel == Channel::right) {
                                                  ^
/var/home/v/devel/easyeffects/src/equalizer_ui.cpp:448:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(EqualizerBox* self,
     ^
/var/home/v/devel/easyeffects/src/exciter.cpp:20:10: error: 'exciter.hpp' file not found [clang-diagnostic-error]
#include "exciter.hpp"
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/exciter_preset.cpp:20:10: error: 'exciter_preset.hpp' file not found [clang-diagnostic-error]
#include "exciter_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:20:10: error: 'exciter_ui.hpp' file not found [clang-diagnostic-error]
#include "exciter_ui.hpp"
         ^~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:24:8: warning: constructor does not initialize these fields: exciter, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:37:8: warning: declaration uses identifier '_ExciterBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _ExciterBox {
       ^~~~~~~~~~~
       ExciterBox
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, harmonics_levelbar, harmonics_levelbar_label, ceil, amount, harmonics, scope, blend, ceil_active, listen, settings, data [cppcoreguidelines-pro-type-member-init]
struct _ExciterBox {
       ^
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:61:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(ExciterBox, exciter_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/exciter_ui.cpp:67:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(ExciterBox* self, std::shared_ptr<Exciter> exciter, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/filter.cpp:20:10: error: 'filter.hpp' file not found [clang-diagnostic-error]
#include "filter.hpp"
         ^~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/filter_preset.cpp:20:10: error: 'filter_preset.hpp' file not found [clang-diagnostic-error]
#include "filter_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/filter_ui.cpp:20:10: error: 'filter_ui.hpp' file not found [clang-diagnostic-error]
#include "filter_ui.hpp"
         ^~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/filter_ui.cpp:24:8: warning: constructor does not initialize these fields: filter, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/filter_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/filter_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/filter_ui.cpp:37:8: warning: declaration uses identifier '_FilterBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _FilterBox {
       ^~~~~~~~~~
       FilterBox
/var/home/v/devel/easyeffects/src/filter_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, mode, frequency, resonance, inertia, settings, data [cppcoreguidelines-pro-type-member-init]
struct _FilterBox {
       ^
/var/home/v/devel/easyeffects/src/filter_ui.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(FilterBox, filter_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/filter_ui.cpp:61:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(FilterBox* self, std::shared_ptr<Filter> filter, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/fir_filter_bandpass.cpp:20:10: error: 'fir_filter_bandpass.hpp' file not found [clang-diagnostic-error]
#include "fir_filter_bandpass.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/fir_filter_base.cpp:20:10: error: 'fir_filter_base.hpp' file not found [clang-diagnostic-error]
#include "fir_filter_base.hpp"
         ^~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/fir_filter_highpass.cpp:20:10: error: 'fir_filter_highpass.hpp' file not found [clang-diagnostic-error]
#include "fir_filter_highpass.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/fir_filter_lowpass.cpp:20:10: error: 'fir_filter_lowpass.hpp' file not found [clang-diagnostic-error]
#include "fir_filter_lowpass.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/gate.cpp:20:10: error: 'gate.hpp' file not found [clang-diagnostic-error]
#include "gate.hpp"
         ^~~~~~~~~~
/var/home/v/devel/easyeffects/src/gate_preset.cpp:20:10: error: 'gate_preset.hpp' file not found [clang-diagnostic-error]
#include "gate_preset.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/gate_ui.cpp:20:10: error: 'gate_ui.hpp' file not found [clang-diagnostic-error]
#include "gate_ui.hpp"
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/gate_ui.cpp:24:8: warning: constructor does not initialize these fields: gate, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/gate_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/gate_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/gate_ui.cpp:37:8: warning: declaration uses identifier '_GateBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _GateBox {
       ^~~~~~~~
       GateBox
/var/home/v/devel/easyeffects/src/gate_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, attack_zone_start_label, attack_threshold_label, release_zone_start_label, release_threshold_label, gain_label, sidechain_label, curve_label, envelope_label, gating, gating_label, hysteresis, attack, release, curve_threshold, curve_zone, hysteresis_threshold, hysteresis_zone, dry, wet, reduction, makeup, preamp, reactivity, lookahead, hpf_freq, lpf_freq, sidechain_input, sidechain_mode, sidechain_source, lpf_mode, hpf_mode, listen, dropdown_input_devices, input_devices_model, settings, data [cppcoreguidelines-pro-type-member-init]
struct _GateBox {
       ^
/var/home/v/devel/easyeffects/src/gate_ui.cpp:72:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(GateBox, gate_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/gate_ui.cpp:78:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
gboolean set_dropdown_sensitive(GateBox* self, const char* active_id) {
         ^
/var/home/v/devel/easyeffects/src/gate_ui.cpp:87:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_single_selection_new(G_LIST_MODEL(self->input_devices_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/gate_ui.cpp:104:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(GateBox* self, std::shared_ptr<Gate> gate, const std::string& schema_path, PipeManager* pm) {
     ^
/var/home/v/devel/easyeffects/src/limiter.cpp:20:10: error: 'limiter.hpp' file not found [clang-diagnostic-error]
#include "limiter.hpp"
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/limiter_preset.cpp:20:10: error: 'limiter_preset.hpp' file not found [clang-diagnostic-error]
#include "limiter_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:20:10: error: 'limiter_ui.hpp' file not found [clang-diagnostic-error]
#include "limiter_ui.hpp"
         ^~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:24:8: warning: constructor does not initialize these fields: limiter, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:37:8: warning: declaration uses identifier '_LimiterBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _LimiterBox {
       ^~~~~~~~~~~
       LimiterBox
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, mode, oversampling, dither, dropdown_input_devices, gain_left, gain_right, sidechain_left, sidechain_right, sc_preamp, lookahead, attack, release, threshold, stereo_link, alr_attack, alr_release, alr_knee, gain_boost, alr, external_sidechain, input_devices_model, settings, data [cppcoreguidelines-pro-type-member-init]
struct _LimiterBox {
       ^
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:66:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(LimiterBox, limiter_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:73:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_single_selection_new(G_LIST_MODEL(self->input_devices_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/limiter_ui.cpp:90:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(LimiterBox* self, std::shared_ptr<Limiter> limiter, const std::string& schema_path, PipeManager* pm) {
     ^
/var/home/v/devel/easyeffects/src/loudness.cpp:20:10: error: 'loudness.hpp' file not found [clang-diagnostic-error]
#include "loudness.hpp"
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/loudness_preset.cpp:20:10: error: 'loudness_preset.hpp' file not found [clang-diagnostic-error]
#include "loudness_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:20:10: error: 'loudness_ui.hpp' file not found [clang-diagnostic-error]
#include "loudness_ui.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:24:8: warning: constructor does not initialize these fields: loudness, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:37:8: warning: declaration uses identifier '_LoudnessBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _LoudnessBox {
       ^~~~~~~~~~~~
       LoudnessBox
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, fft_size, standard, clipping, volume, clipping_range, settings, data [cppcoreguidelines-pro-type-member-init]
struct _LoudnessBox {
       ^
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:57:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(LoudnessBox, loudness_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/loudness_ui.cpp:63:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(LoudnessBox* self, std::shared_ptr<Loudness> loudness, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/lv2_wrapper.cpp:20:10: error: 'lv2_wrapper.hpp' file not found [clang-diagnostic-error]
#include "lv2_wrapper.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/lv2_wrapper.cpp:27:6: warning: do not define a C-style variadic function; consider using a function parameter pack or currying instead [cert-dcl50-cpp]
auto lv2_printf(LV2_Log_Handle handle, LV2_URID type, const char* format, ...) -> int {
     ^
/var/home/v/devel/easyeffects/src/lv2_wrapper.cpp:28:11: warning: variable 'args' is not initialized [cppcoreguidelines-init-variables]
  va_list args;
          ^
               = 0
/var/home/v/devel/easyeffects/src/lv2_wrapper.cpp:32:7: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
  int r = std::vprintf(format, args);
      ^
        = 0
/var/home/v/devel/easyeffects/src/maximizer.cpp:20:10: error: 'maximizer.hpp' file not found [clang-diagnostic-error]
#include "maximizer.hpp"
         ^~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/maximizer_preset.cpp:20:10: error: 'maximizer_preset.hpp' file not found [clang-diagnostic-error]
#include "maximizer_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:20:10: error: 'maximizer_ui.hpp' file not found [clang-diagnostic-error]
#include "maximizer_ui.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:24:8: warning: constructor does not initialize these fields: maximizer, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:37:8: warning: declaration uses identifier '_MaximizerBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _MaximizerBox {
       ^~~~~~~~~~~~~
       MaximizerBox
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, release, threshold, ceiling, reduction_levelbar, reduction_label, settings, data [cppcoreguidelines-pro-type-member-init]
struct _MaximizerBox {
       ^
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:57:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(MaximizerBox, maximizer_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/maximizer_ui.cpp:63:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(MaximizerBox* self, std::shared_ptr<Maximizer> maximizer, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:20:10: error: 'module_info_holder.hpp' file not found [clang-diagnostic-error]
#include "module_info_holder.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:26:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(ModuleInfoHolder, module_info_holder, G_TYPE_OBJECT);
^
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:29:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_MODULE_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:32:5: warning: switch has 5 consecutive identical branches [bugprone-branch-clone]
    case PROP_ID:
    ^
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:46:12: note: last of these clones ends here
      break;
           ^
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:51:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_MODULE_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:54:5: warning: switch has 5 consecutive identical branches [bugprone-branch-clone]
    case PROP_ID:
    ^
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:68:12: note: last of these clones ends here
      break;
           ^
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:73:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_MODULE_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:85:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/module_info_holder.cpp:112:9: warning: variable 'holder' is not initialized [cppcoreguidelines-init-variables]
  auto* holder = static_cast<ModuleInfoHolder*>(g_object_new(EE_TYPE_MODULE_INFO_HOLDER, nullptr));
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/multiband_compressor.cpp:20:10: error: 'multiband_compressor.hpp' file not found [clang-diagnostic-error]
#include "multiband_compressor.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_compressor_band_box.cpp:20:10: error: 'multiband_compressor_band_box.hpp' file not found [clang-diagnostic-error]
#include "multiband_compressor_band_box.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_compressor_band_box.cpp:24:8: warning: constructor does not initialize these fields: index, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/multiband_compressor_band_box.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/multiband_compressor_band_box.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/multiband_compressor_band_box.cpp:33:8: warning: declaration uses identifier '_MultibandCompressorBandBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _MultibandCompressorBandBox {
       ^~~~~~~~~~~~~~~~~~~~~~~~~~~
       MultibandCompressorBandBox
/var/home/v/devel/easyeffects/src/multiband_compressor_band_box.cpp:33:8: warning: constructor does not initialize these fields: parent_instance, bypass, mute, solo, external_sidechain, end_label, gain_label, envelope_label, curve_label, split_frequency, lowcut_filter_frequency, highcut_filter_frequency, attack_time, attack_threshold, release_time, release_threshold, ratio, knee, makeup, sidechain_preamp, sidechain_reactivity, sidechain_lookahead, boost_amount, boost_threshold, lowcut_filter, highcut_filter, compression_mode, sidechain_mode, sidechain_source, split_frequency_box, settings, data [cppcoreguidelines-pro-type-member-init]
struct _MultibandCompressorBandBox {
       ^
/var/home/v/devel/easyeffects/src/multiband_compressor_band_box.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(MultibandCompressorBandBox, multiband_compressor_band_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/multiband_compressor_preset.cpp:20:10: error: 'multiband_compressor_preset.hpp' file not found [clang-diagnostic-error]
#include "multiband_compressor_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:20:10: error: 'multiband_compressor_ui.hpp' file not found [clang-diagnostic-error]
#include "multiband_compressor_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:28:8: warning: constructor does not initialize these fields: multiband_compressor, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:28:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:30:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:41:8: warning: declaration uses identifier '_MultibandCompressorBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _MultibandCompressorBox {
       ^~~~~~~~~~~~~~~~~~~~~~~
       MultibandCompressorBox
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:41:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, stack, enable_band1, enable_band2, enable_band3, enable_band4, enable_band5, enable_band6, enable_band7, dry, wet, compressor_mode, envelope_boost, dropdown_input_devices, input_devices_model, settings, bands, data [cppcoreguidelines-pro-type-member-init]
struct _MultibandCompressorBox {
       ^
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:70:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(MultibandCompressorBox, multiband_compressor_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:77:13: warning: variable 'selected_row' is not initialized [cppcoreguidelines-init-variables]
  if (auto* selected_row = gtk_list_box_get_selected_row(listbox); selected_row != nullptr) {
            ^
                         = nullptr
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:116:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_single_selection_new(G_LIST_MODEL(self->input_devices_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/multiband_compressor_ui.cpp:133:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(MultibandCompressorBox* self,
     ^
/var/home/v/devel/easyeffects/src/multiband_gate.cpp:20:10: error: 'multiband_gate.hpp' file not found [clang-diagnostic-error]
#include "multiband_gate.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:20:10: error: 'multiband_gate_band_box.hpp' file not found [clang-diagnostic-error]
#include "multiband_gate_band_box.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:33:8: warning: declaration uses identifier '_MultibandGateBandBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _MultibandGateBandBox {
       ^~~~~~~~~~~~~~~~~~~~~
       MultibandGateBandBox
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:33:8: warning: constructor does not initialize these fields: parent_instance, bypass, mute, solo, external_sidechain, hysteresis, end_label, gain_label, envelope_label, curve_label, gating_label, split_frequency, lowcut_filter_frequency, highcut_filter_frequency, attack_time, release_time, hysteresis_threshold, hysteresis_zone, curve_threshold, curve_zone, reduction, makeup, sidechain_preamp, sidechain_reactivity, sidechain_lookahead, lowcut_filter, highcut_filter, sidechain_mode, sidechain_source, split_frequency_box, gating, settings, data [cppcoreguidelines-pro-type-member-init]
struct _MultibandGateBandBox {
       ^
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:57:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(MultibandGateBandBox, multiband_gate_band_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:206:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_MULTIBAND_GATE_BAND_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:220:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_MULTIBAND_GATE_BAND_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:230:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/multiband_gate_band_box.cpp:231:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/multiband_gate_preset.cpp:20:10: error: 'multiband_gate_preset.hpp' file not found [clang-diagnostic-error]
#include "multiband_gate_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:20:10: error: 'multiband_gate_ui.hpp' file not found [clang-diagnostic-error]
#include "multiband_gate_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:28:8: warning: constructor does not initialize these fields: multiband_gate, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:28:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:30:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:41:8: warning: declaration uses identifier '_MultibandGateBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _MultibandGateBox {
       ^~~~~~~~~~~~~~~~~
       MultibandGateBox
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:41:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, stack, enable_band1, enable_band2, enable_band3, enable_band4, enable_band5, enable_band6, enable_band7, dry, wet, gate_mode, envelope_boost, dropdown_input_devices, input_devices_model, settings, bands, data [cppcoreguidelines-pro-type-member-init]
struct _MultibandGateBox {
       ^
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:70:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(MultibandGateBox, multiband_gate_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:77:13: warning: variable 'selected_row' is not initialized [cppcoreguidelines-init-variables]
  if (auto* selected_row = gtk_list_box_get_selected_row(listbox); selected_row != nullptr) {
            ^
                         = nullptr
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:116:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_single_selection_new(G_LIST_MODEL(self->input_devices_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/multiband_gate_ui.cpp:133:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(MultibandGateBox* self,
     ^
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:20:10: error: 'node_info_holder.hpp' file not found [clang-diagnostic-error]
#include "node_info_holder.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:28:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(NodeInfoHolder, node_info_holder, G_TYPE_OBJECT);
^
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:31:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_NODE_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:34:5: warning: switch has 7 consecutive identical branches [bugprone-branch-clone]
    case PROP_SERIAL:
    ^
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:54:12: note: last of these clones ends here
      break;
           ^
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:59:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_NODE_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:62:5: warning: switch has 7 consecutive identical branches [bugprone-branch-clone]
    case PROP_SERIAL:
    ^
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:82:12: note: last of these clones ends here
      break;
           ^
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:87:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_NODE_INFO_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:99:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/node_info_holder.cpp:136:9: warning: variable 'holder' is not initialized [cppcoreguidelines-init-variables]
  auto* holder = static_cast<NodeInfoHolder*>(g_object_new(EE_TYPE_NODE_INFO_HOLDER, nullptr));
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/output_level.cpp:20:10: error: 'output_level.hpp' file not found [clang-diagnostic-error]
#include "output_level.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:20:10: error: 'pipe_manager.hpp' file not found [clang-diagnostic-error]
#include "pipe_manager.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:56:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return true;
~~~~~~~~~~~^~~~~
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:77:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return true;
~~~~~~~~~~~^~~~~
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:94:12: warning: variable 'info' is not initialized [cppcoreguidelines-init-variables]
  LinkInfo info;
           ^
                = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:116:12: warning: variable 'info' is not initialized [cppcoreguidelines-init-variables]
  PortInfo info;
           ^
                = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:422:81: warning: repeated branch in conditional chain [bugprone-branch-clone]
    if (nd->nd_info->media_class == tags::pipewire::media_class::output_stream) {
                                                                                ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:430:6: note: end of the original
    } else if (nd->nd_info->media_class == tags::pipewire::media_class::input_stream) {
     ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:430:87: note: clone 1 starts here
    } else if (nd->nd_info->media_class == tags::pipewire::media_class::input_stream) {
                                                                                      ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:482:17: warning: variable 'pod_prop' is not initialized [cppcoreguidelines-init-variables]
  spa_pod_prop* pod_prop = nullptr;
                ^
                         = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:483:9: warning: variable 'obj' is not initialized [cppcoreguidelines-init-variables]
  auto* obj = (spa_pod_object*)param;
        ^
            = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:662:12: warning: variable 'link_copy' is not initialized [cppcoreguidelines-init-variables]
  LinkInfo link_copy;
           ^
                     = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:823:22: warning: variable 'direction' is not initialized [cppcoreguidelines-init-variables]
  enum spa_direction direction {};
                     ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:824:31: warning: variable 'available' is not initialized [cppcoreguidelines-init-variables]
  enum spa_param_availability available {};
                              ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:888:21: warning: variable 'str_key' is not initialized [cppcoreguidelines-init-variables]
  const std::string str_key = (key != nullptr) ? key : "";
                    ^
                            = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:889:21: warning: variable 'str_type' is not initialized [cppcoreguidelines-init-variables]
  const std::string str_type = (type != nullptr) ? type : "";
                    ^
                             = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:890:21: warning: variable 'str_value' is not initialized [cppcoreguidelines-init-variables]
  const std::string str_value = (value != nullptr) ? value : "";
                    ^
                              = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1024:31: warning: variable 'node_name' is not initialized [cppcoreguidelines-init-variables]
                  std::string node_name = spa_dict_lookup(props, PW_KEY_NODE_NAME);
                              ^
                                        = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1036:25: warning: variable 'media_class' is not initialized [cppcoreguidelines-init-variables]
      const std::string media_class = key_media_class;
                        ^
                                    = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1047:19: warning: variable 'node_name' is not initialized [cppcoreguidelines-init-variables]
      std::string node_name;
                  ^
                            = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1063:16: warning: variable 'serial' is not initialized [cppcoreguidelines-init-variables]
      uint64_t serial = 0;
               ^
                      = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1073:13: warning: variable 'proxy' is not initialized [cppcoreguidelines-init-variables]
      auto* proxy =
            ^
                  = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1076:13: warning: variable 'nd' is not initialized [cppcoreguidelines-init-variables]
      auto* nd = static_cast<node_data*>(pw_proxy_get_user_data(proxy));
            ^
               = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1112:110: warning: repeated branch in conditional chain [bugprone-branch-clone]
      if (media_class == tags::pipewire::media_class::source && node_name != tags::pipewire::ee_source_name) {
                                                                                                             ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1120:8: note: end of the original
      } else if (media_class == tags::pipewire::media_class::sink && node_name != tags::pipewire::ee_sink_name) {
       ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1120:113: note: clone 1 starts here
      } else if (media_class == tags::pipewire::media_class::sink && node_name != tags::pipewire::ee_sink_name) {
                                                                                                                ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1128:77: note: clone 2 starts here
      } else if (media_class == tags::pipewire::media_class::output_stream) {
                                                                            ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1136:76: note: clone 3 starts here
      } else if (media_class == tags::pipewire::media_class::input_stream) {
                                                                           ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1154:14: warning: variable 'serial' is not initialized [cppcoreguidelines-init-variables]
    uint64_t serial = 0;
             ^
                    = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1162:11: warning: variable 'proxy' is not initialized [cppcoreguidelines-init-variables]
    auto* proxy = static_cast<pw_proxy*>(pw_registry_bind(pm->registry, id, type, PW_VERSION_LINK, sizeof(proxy_data)));
          ^
                = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1164:17: warning: variable 'pd' is not initialized [cppcoreguidelines-init-variables]
    auto* const pd = static_cast<proxy_data*>(pw_proxy_get_user_data(proxy));
                ^
                   = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1195:14: warning: variable 'serial' is not initialized [cppcoreguidelines-init-variables]
    uint64_t serial = 0;
             ^
                    = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1203:11: warning: variable 'proxy' is not initialized [cppcoreguidelines-init-variables]
    auto* proxy = static_cast<pw_proxy*>(pw_registry_bind(pm->registry, id, type, PW_VERSION_PORT, sizeof(proxy_data)));
          ^
                = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1205:17: warning: variable 'pd' is not initialized [cppcoreguidelines-init-variables]
    auto* const pd = static_cast<proxy_data*>(pw_proxy_get_user_data(proxy));
                ^
                   = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1228:14: warning: variable 'serial' is not initialized [cppcoreguidelines-init-variables]
    uint64_t serial = 0;
             ^
                    = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1236:11: warning: variable 'proxy' is not initialized [cppcoreguidelines-init-variables]
    auto* proxy =
          ^
                = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1239:17: warning: variable 'pd' is not initialized [cppcoreguidelines-init-variables]
    auto* const pd = static_cast<proxy_data*>(pw_proxy_get_user_data(proxy));
                ^
                   = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1249:16: warning: variable 'm_info' is not initialized [cppcoreguidelines-init-variables]
    ModuleInfo m_info{.id = id, .serial = serial};
               ^
                      = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1259:14: warning: variable 'serial' is not initialized [cppcoreguidelines-init-variables]
    uint64_t serial = 0;
             ^
                    = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1267:11: warning: variable 'proxy' is not initialized [cppcoreguidelines-init-variables]
    auto* proxy =
          ^
                = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1270:17: warning: variable 'pd' is not initialized [cppcoreguidelines-init-variables]
    auto* const pd = static_cast<proxy_data*>(pw_proxy_get_user_data(proxy));
                ^
                   = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1280:16: warning: variable 'c_info' is not initialized [cppcoreguidelines-init-variables]
    ClientInfo c_info{.id = id, .serial = serial};
               ^
                      = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1302:9: warning: if with identical then and else branches [bugprone-branch-clone]
        if (pm->metadata != nullptr) {
        ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1304:11: note: else branch starts here
        } else {
          ^
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1315:25: warning: variable 'media_class' is not initialized [cppcoreguidelines-init-variables]
      const std::string media_class = key_media_class;
                        ^
                                    = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1318:18: warning: variable 'serial' is not initialized [cppcoreguidelines-init-variables]
        uint64_t serial = 0;
                 ^
                        = 0
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1326:15: warning: variable 'proxy' is not initialized [cppcoreguidelines-init-variables]
        auto* proxy =
              ^
                    = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1329:21: warning: variable 'pd' is not initialized [cppcoreguidelines-init-variables]
        auto* const pd = static_cast<proxy_data*>(pw_proxy_get_user_data(proxy));
                    ^
                       = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager.cpp:1339:20: warning: variable 'd_info' is not initialized [cppcoreguidelines-init-variables]
        DeviceInfo d_info{.id = id, .serial = serial, .media_class = media_class};
                   ^
                          = 0
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:20:10: error: 'pipe_manager_box.hpp' file not found [clang-diagnostic-error]
#include "pipe_manager_box.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:26:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:28:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:39:8: warning: declaration uses identifier '_PipeManagerBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PipeManagerBox {
       ^~~~~~~~~~~~~~~
       PipeManagerBox
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:39:8: warning: constructor does not initialize these fields: parent_instance, use_default_input, use_default_output, enable_test_signal, dropdown_input_devices, dropdown_output_devices, dropdown_autoloading_output_devices, dropdown_autoloading_input_devices, dropdown_autoloading_output_presets, dropdown_autoloading_input_presets, listview_modules, listview_clients, listview_autoloading_output, listview_autoloading_input, autoloading_add_input_profile, autoloading_add_output_profile, header_version, library_version, quantum, max_quantum, min_quantum, server_rate, spinbutton_test_signal_frequency, input_devices_model, output_devices_model, modules_model, clients_model, autoloading_input_model, autoloading_output_model, autoloading_input_devices_model, autoloading_output_devices_model, input_presets_string_list, output_presets_string_list, sie_settings, soe_settings, data [cppcoreguidelines-pro-type-member-init]
struct _PipeManagerBox {
       ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:65:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(PipeManagerBox, pipe_manager_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:106:9: warning: variable 'holder' is not initialized [cppcoreguidelines-init-variables]
  auto* holder = static_cast<ui::holders::NodeInfoHolder*>(
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:113:15: warning: variable 'device_profile' is not initialized [cppcoreguidelines-init-variables]
  std::string device_profile;
              ^
                             = 0
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:148:9: warning: variable 'preset_name' is not initialized [cppcoreguidelines-init-variables]
  auto* preset_name = gtk_string_object_get_string(GTK_STRING_OBJECT(selected_preset));
        ^
                    = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:155:9: warning: variable 'holder' is not initialized [cppcoreguidelines-init-variables]
  auto* holder = static_cast<ui::holders::NodeInfoHolder*>(
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:162:15: warning: variable 'device_profile' is not initialized [cppcoreguidelines-init-variables]
  std::string device_profile;
              ^
                             = 0
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:197:9: warning: variable 'preset_name' is not initialized [cppcoreguidelines-init-variables]
  auto* preset_name = gtk_string_object_get_string(GTK_STRING_OBJECT(selected_preset));
        ^
                    = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:234:115: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if (const auto name = gtk_stack_get_visible_child_name(GTK_STACK(stack)); g_strcmp0(name, "page_modules") == 0) {
                                                                                                                  ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:236:4: note: end of the original
  } else if (g_strcmp0(name, "page_clients") == 0) {
   ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:236:52: note: clone 1 starts here
  } else if (g_strcmp0(name, "page_clients") == 0) {
                                                   ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:242:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_no_selection_new(G_LIST_MODEL(self->modules_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:250:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_no_selection_new(G_LIST_MODEL(self->clients_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:259:15: warning: variable 'model' is not initialized [cppcoreguidelines-init-variables]
  GListStore* model;
              ^
                    = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:260:16: warning: variable 'listview' is not initialized [cppcoreguidelines-init-variables]
  GtkListView* listview;
               ^
                        = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:262:52: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if constexpr (preset_type == PresetType::output) {
                                                   ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:266:4: note: end of the original
  } else if constexpr (preset_type == PresetType::input) {
   ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:266:58: note: clone 1 starts here
  } else if constexpr (preset_type == PresetType::input) {
                                                         ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:352:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_no_selection_new(G_LIST_MODEL(model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:361:16: warning: variable 'dropdown' is not initialized [cppcoreguidelines-init-variables]
  GtkDropDown* dropdown;
               ^
                        = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:362:18: warning: variable 'string_list' is not initialized [cppcoreguidelines-init-variables]
  GtkStringList* string_list;
                 ^
                             = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:364:52: warning: repeated branch in conditional chain [bugprone-branch-clone]
  if constexpr (preset_type == PresetType::output) {
                                                   ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:368:4: note: end of the original
  } else if constexpr (preset_type == PresetType::input) {
   ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:368:58: note: clone 1 starts here
  } else if constexpr (preset_type == PresetType::input) {
                                                         ^
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:380:9: warning: variable 'sorter' is not initialized [cppcoreguidelines-init-variables]
  auto* sorter = gtk_string_sorter_new(gtk_property_expression_new(GTK_TYPE_STRING_OBJECT, nullptr, "string"));
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:382:9: warning: variable 'sorter_model' is not initialized [cppcoreguidelines-init-variables]
  auto* sorter_model = gtk_sort_list_model_new(G_LIST_MODEL(string_list), GTK_SORTER(sorter));
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:386:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_single_selection_new(G_LIST_MODEL(sorter_model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:394:9: warning: variable 'selection' is not initialized [cppcoreguidelines-init-variables]
  auto* selection = gtk_single_selection_new(G_LIST_MODEL(model));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:484:11: warning: variable 'holder_selected' is not initialized [cppcoreguidelines-init-variables]
    auto* holder_selected =
          ^
                          = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:510:11: warning: variable 'holder_selected' is not initialized [cppcoreguidelines-init-variables]
    auto* holder_selected =
          ^
                          = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:735:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PIPE_MANAGER_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:762:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PIPE_MANAGER_BOX(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:772:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/pipe_manager_box.cpp:773:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/pitch.cpp:20:10: error: 'pitch.hpp' file not found [clang-diagnostic-error]
#include "pitch.hpp"
         ^~~~~~~~~~~
/var/home/v/devel/easyeffects/src/pitch_preset.cpp:20:10: error: 'pitch_preset.hpp' file not found [clang-diagnostic-error]
#include "pitch_preset.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:20:10: error: 'pitch_ui.hpp' file not found [clang-diagnostic-error]
#include "pitch_ui.hpp"
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:24:8: warning: constructor does not initialize these fields: pitch, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:37:8: warning: declaration uses identifier '_PitchBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PitchBox {
       ^~~~~~~~~
       PitchBox
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, mode, formant, transients, detector, phase, cents, semitones, octaves, settings, data [cppcoreguidelines-pro-type-member-init]
struct _PitchBox {
       ^
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(PitchBox, pitch_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/pitch_ui.cpp:61:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(PitchBox* self, std::shared_ptr<Pitch> pitch, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:20:10: error: 'plugin_base.hpp' file not found [clang-diagnostic-error]
#include "plugin_base.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/plugin_base.cpp:50:9: warning: variable 'in_left' is not initialized [cppcoreguidelines-init-variables]
  auto* in_left = static_cast<float*>(pw_filter_get_dsp_buffer(d->in_left, n_samples));
        ^
                = nullptr
/var/home/v/devel/easyeffects/src/plugin_base.cpp:51:9: warning: variable 'in_right' is not initialized [cppcoreguidelines-init-variables]
  auto* in_right = static_cast<float*>(pw_filter_get_dsp_buffer(d->in_right, n_samples));
        ^
                 = nullptr
/var/home/v/devel/easyeffects/src/plugin_base.cpp:53:9: warning: variable 'out_left' is not initialized [cppcoreguidelines-init-variables]
  auto* out_left = static_cast<float*>(pw_filter_get_dsp_buffer(d->out_left, n_samples));
        ^
                 = nullptr
/var/home/v/devel/easyeffects/src/plugin_base.cpp:54:9: warning: variable 'out_right' is not initialized [cppcoreguidelines-init-variables]
  auto* out_right = static_cast<float*>(pw_filter_get_dsp_buffer(d->out_right, n_samples));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/plugin_base.cpp:61:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (in_left != nullptr) {
  ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:63:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:67:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (in_right != nullptr) {
  ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:69:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:73:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (out_left != nullptr) {
  ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:75:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:79:3: warning: if with identical then and else branches [bugprone-branch-clone]
  if (out_right != nullptr) {
  ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:81:5: note: else branch starts here
  } else {
    ^
/var/home/v/devel/easyeffects/src/plugin_base.cpp:88:11: warning: variable 'probe_left' is not initialized [cppcoreguidelines-init-variables]
    auto* probe_left = static_cast<float*>(pw_filter_get_dsp_buffer(d->probe_left, n_samples));
          ^
                     = nullptr
/var/home/v/devel/easyeffects/src/plugin_base.cpp:89:11: warning: variable 'probe_right' is not initialized [cppcoreguidelines-init-variables]
    auto* probe_right = static_cast<float*>(pw_filter_get_dsp_buffer(d->probe_right, n_samples));
          ^
                      = nullptr
/var/home/v/devel/easyeffects/src/plugin_base.cpp:92:17: warning: variable 'l' is not initialized [cppcoreguidelines-init-variables]
      std::span l{d->pb->dummy_left.data(), d->pb->dummy_left.data() + n_samples};
                ^
                  = 0
/var/home/v/devel/easyeffects/src/plugin_base.cpp:93:17: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
      std::span r{d->pb->dummy_right.data(), d->pb->dummy_right.data() + n_samples};
                ^
                  = 0
/var/home/v/devel/easyeffects/src/plugin_base.cpp:97:17: warning: variable 'l' is not initialized [cppcoreguidelines-init-variables]
      std::span l{probe_left, probe_left + n_samples};
                ^
                  = 0
/var/home/v/devel/easyeffects/src/plugin_base.cpp:98:17: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
      std::span r{probe_right, probe_right + n_samples};
                ^
                  = 0
/var/home/v/devel/easyeffects/src/plugin_preset_base.cpp:20:10: error: 'plugin_preset_base.hpp' file not found [clang-diagnostic-error]
#include "plugin_preset_base.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/plugins_box.cpp:20:10: error: 'plugins_box.hpp' file not found [clang-diagnostic-error]
#include "plugins_box.hpp"
         ^~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/plugins_box.cpp:26:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/plugins_box.cpp:28:3: warning: constructor does not initialize these fields: schedule_signal_idle, application, pipeline_type, schema_path, translated, connections, gconnections [cppcoreguidelines-pro-type-member-init]
  Data() { this->translated = tags::plugin_name::get_translated(); }
  ^
/var/home/v/devel/easyeffects/src/plugins_box.cpp:28:3: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
/var/home/v/devel/easyeffects/src/plugins_box.cpp:30:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/plugins_box.cpp:47:8: warning: declaration uses identifier '_PluginsBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PluginsBox {
       ^~~~~~~~~~~
       PluginsBox
/var/home/v/devel/easyeffects/src/plugins_box.cpp:47:8: warning: constructor does not initialize these fields: parent_instance, menubutton_plugins, plugin_overlay, overlay_no_plugins, listview, stack, startpoint_box, endpoint_box, startpoint_icon, endpoint_icon, startpoint_name, endpoint_name, plugins_menu, settings, data [cppcoreguidelines-pro-type-member-init]
struct _PluginsBox {
       ^
/var/home/v/devel/easyeffects/src/plugins_box.cpp:73:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(PluginsBox, plugins_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:20:10: error: 'plugins_menu.hpp' file not found [clang-diagnostic-error]
#include "plugins_menu.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:26:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:28:3: warning: constructor does not initialize these fields: schedule_signal_idle, application, translated, connections, gconnections [cppcoreguidelines-pro-type-member-init]
  Data() { this->translated = tags::plugin_name::get_translated(); }
  ^
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:28:3: warning: use '= default' to define a trivial default constructor [modernize-use-equals-default]
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:30:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:43:8: warning: declaration uses identifier '_PluginsMenu', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PluginsMenu {
       ^~~~~~~~~~~~
       PluginsMenu
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:43:8: warning: constructor does not initialize these fields: parent_instance, scrolled_window, listview, string_list, settings, app_settings, data [cppcoreguidelines-pro-type-member-init]
struct _PluginsMenu {
       ^
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:57:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(PluginsMenu, plugins_menu, GTK_TYPE_POPOVER)
^
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:175:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PLUGINS_MENU(widget);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:177:9: warning: variable 'active_window' is not initialized [cppcoreguidelines-init-variables]
  auto* active_window = gtk_application_get_active_window(GTK_APPLICATION(self->data->application));
        ^
                      = nullptr
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:181:13: warning: variable 'menu_height' is not initialized [cppcoreguidelines-init-variables]
  const int menu_height = static_cast<int>(0.5F * static_cast<float>(active_window_height));
            ^
                        = 0
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:189:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PLUGINS_MENU(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:211:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PLUGINS_MENU(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:221:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/plugins_menu.cpp:222:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/preferences_general.cpp:20:10: error: 'preferences_general.hpp' file not found [clang-diagnostic-error]
#include "preferences_general.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/preferences_general.cpp:26:8: warning: declaration uses identifier '_PreferencesGeneral', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PreferencesGeneral {
       ^~~~~~~~~~~~~~~~~~~
       PreferencesGeneral
/var/home/v/devel/easyeffects/src/preferences_general.cpp:26:8: warning: constructor does not initialize these fields: parent_instance, enable_autostart, process_all_inputs, process_all_outputs, theme_switch, shutdown_on_window_close, use_cubic_volumes, autohide_popovers, reset_volume_on_startup, exclude_monitor_streams, inactivity_timeout, settings [cppcoreguidelines-pro-type-member-init]
struct _PreferencesGeneral {
       ^
/var/home/v/devel/easyeffects/src/preferences_general.cpp:37:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(PreferencesGeneral, preferences_general, ADW_TYPE_PREFERENCES_PAGE)
^
/var/home/v/devel/easyeffects/src/preferences_general.cpp:40:25: warning: variable 'autostart_dir' is not initialized [cppcoreguidelines-init-variables]
  std::filesystem::path autostart_dir{g_get_user_config_dir() + "/autostart"s};
                        ^
                                      = 0
/var/home/v/devel/easyeffects/src/preferences_general.cpp:43:41: warning: variable 'autostart_dir' is not initialized [cppcoreguidelines-init-variables]
    std::filesystem::create_directories(autostart_dir);
                                        ^
                                                      = 0
/var/home/v/devel/easyeffects/src/preferences_general.cpp:46:25: warning: variable 'autostart_file' is not initialized [cppcoreguidelines-init-variables]
  std::filesystem::path autostart_file{g_get_user_config_dir() + "/autostart/easyeffects-service.desktop"s};
                        ^
                                       = 0
/var/home/v/devel/easyeffects/src/preferences_general.cpp:50:21: warning: variable 'ofs' is not initialized [cppcoreguidelines-init-variables]
      std::ofstream ofs{autostart_file};
                    ^
                        = 0
/var/home/v/devel/easyeffects/src/preferences_general.cpp:67:31: warning: variable 'autostart_file' is not initialized [cppcoreguidelines-init-variables]
      std::filesystem::remove(autostart_file);
                              ^
                                             = 0
/var/home/v/devel/easyeffects/src/preferences_general.cpp:77:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PREFERENCES_GENERAL(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/preferences_general.cpp:87:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/preferences_general.cpp:88:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:20:10: error: 'preferences_spectrum.hpp' file not found [clang-diagnostic-error]
#include "preferences_spectrum.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:31:8: warning: declaration uses identifier '_PreferencesSpectrum', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PreferencesSpectrum {
       ^~~~~~~~~~~~~~~~~~~~
       PreferencesSpectrum
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:31:8: warning: constructor does not initialize these fields: parent_instance, show, fill, show_bar_border, rounded_corners, color_button, axis_color_button, type, n_points, height, line_width, minimum_frequency, maximum_frequency, settings, data [cppcoreguidelines-pro-type-member-init]
struct _PreferencesSpectrum {
       ^
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:47:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(PreferencesSpectrum, preferences_spectrum, ADW_TYPE_PREFERENCES_PAGE)
^
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:50:11: warning: variable 'rgba' is not initialized [cppcoreguidelines-init-variables]
  GdkRGBA rgba;
          ^
               = 0
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:58:11: warning: variable 'rgba' is not initialized [cppcoreguidelines-init-variables]
  GdkRGBA rgba;
          ^
               = 0
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:66:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PREFERENCES_SPECTRUM(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:82:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PREFERENCES_SPECTRUM(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:92:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/preferences_spectrum.cpp:93:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/preferences_window.cpp:20:10: error: 'preferences_window.hpp' file not found [clang-diagnostic-error]
#include "preferences_window.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/preferences_window.cpp:24:8: warning: declaration uses identifier '_PreferencesWindow', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PreferencesWindow {
       ^~~~~~~~~~~~~~~~~~
       PreferencesWindow
/var/home/v/devel/easyeffects/src/preferences_window.cpp:24:8: warning: constructor does not initialize these fields: parent_instance, page_general, page_spectrum [cppcoreguidelines-pro-type-member-init]
struct _PreferencesWindow {
       ^
/var/home/v/devel/easyeffects/src/preferences_window.cpp:32:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(PreferencesWindow, preferences_window, ADW_TYPE_PREFERENCES_WINDOW)
^
/var/home/v/devel/easyeffects/src/preferences_window.cpp:35:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PREFERENCES_WINDOW(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/preferences_window.cpp:46:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/preferences_window.cpp:47:9: warning: variable 'widget_class' is not initialized [cppcoreguidelines-init-variables]
  auto* widget_class = GTK_WIDGET_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/presets_autoloading_holder.cpp:20:10: error: 'presets_autoloading_holder.hpp' file not found [clang-diagnostic-error]
#include "presets_autoloading_holder.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/presets_autoloading_holder.cpp:24:1: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
G_DEFINE_TYPE(PresetsAutoloadingHolder, presets_autoloading_holder, G_TYPE_OBJECT);
^
/var/home/v/devel/easyeffects/src/presets_autoloading_holder.cpp:27:9: warning: variable 'self' is not initialized [cppcoreguidelines-init-variables]
  auto* self = EE_PRESETS_AUTOLOADING_HOLDER(object);
        ^
             = nullptr
/var/home/v/devel/easyeffects/src/presets_autoloading_holder.cpp:37:9: warning: variable 'object_class' is not initialized [cppcoreguidelines-init-variables]
  auto* object_class = G_OBJECT_CLASS(klass);
        ^
                     = nullptr
/var/home/v/devel/easyeffects/src/presets_autoloading_holder.cpp:50:9: warning: variable 'holder' is not initialized [cppcoreguidelines-init-variables]
  auto* holder = static_cast<PresetsAutoloadingHolder*>(g_object_new(EE_TYPE_PRESETS_AUTOLOADING_HOLDER, nullptr));
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/presets_manager.cpp:20:10: error: 'presets_manager.hpp' file not found [clang-diagnostic-error]
#include "presets_manager.hpp"
         ^~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/presets_menu.cpp:20:10: error: 'presets_menu.hpp' file not found [clang-diagnostic-error]
#include "presets_menu.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/presets_menu.cpp:24:8: warning: constructor does not initialize these fields: application, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/presets_menu.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/presets_menu.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/presets_menu.cpp:35:8: warning: declaration uses identifier '_PresetsMenu', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _PresetsMenu {
       ^~~~~~~~~~~~
       PresetsMenu
/var/home/v/devel/easyeffects/src/presets_menu.cpp:35:8: warning: constructor does not initialize these fields: parent_instance, stack, output_scrolled_window, input_scrolled_window, output_listview, input_listview, output_name, input_name, last_used_output, last_used_input, output_string_list, input_string_list, settings, data [cppcoreguidelines-pro-type-member-init]
struct _PresetsMenu {
       ^
/var/home/v/devel/easyeffects/src/presets_menu.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(PresetsMenu, presets_menu, GTK_TYPE_POPOVER)
^
/var/home/v/devel/easyeffects/src/resampler.cpp:20:10: error: 'resampler.hpp' file not found [clang-diagnostic-error]
#include "resampler.hpp"
         ^~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/reverb.cpp:20:10: error: 'reverb.hpp' file not found [clang-diagnostic-error]
#include "reverb.hpp"
         ^~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/reverb_preset.cpp:20:10: error: 'reverb_preset.hpp' file not found [clang-diagnostic-error]
#include "reverb_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:20:10: error: 'reverb_ui.hpp' file not found [clang-diagnostic-error]
#include "reverb_ui.hpp"
         ^~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:24:8: warning: constructor does not initialize these fields: reverb, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:37:8: warning: declaration uses identifier '_ReverbBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _ReverbBox {
       ^~~~~~~~~~
       ReverbBox
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, room_size, predelay, decay_time, diffusion, dry, wet, hf_damp, bass_cut, treble_cut, settings, data [cppcoreguidelines-pro-type-member-init]
struct _ReverbBox {
       ^
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:55:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(ReverbBox, reverb_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/reverb_ui.cpp:133:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(ReverbBox* self, std::shared_ptr<Reverb> reverb, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/rnnoise.cpp:20:10: error: 'rnnoise.hpp' file not found [clang-diagnostic-error]
#include "rnnoise.hpp"
         ^~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/rnnoise_preset.cpp:20:10: error: 'rnnoise_preset.hpp' file not found [clang-diagnostic-error]
#include "rnnoise_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:20:10: error: 'rnnoise_ui.hpp' file not found [clang-diagnostic-error]
#include "rnnoise_ui.hpp"
         ^~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:34:30: warning: variable 'model_dir' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static std::filesystem::path model_dir = g_get_user_config_dir() + "/easyeffects/rnnoise"s;
                             ^
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:36:8: warning: constructor does not initialize these fields: application, rnnoise, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:36:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:38:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:51:8: warning: declaration uses identifier '_RNNoiseBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _RNNoiseBox {
       ^~~~~~~~~~~
       RNNoiseBox
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:51:8: warning: constructor does not initialize these fields: parent_instance, toast_overlay, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, active_model_name, model_active_state, model_error_state, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, listview, string_list, selection_model, settings, folder_monitor, data [cppcoreguidelines-pro-type-member-init]
struct _RNNoiseBox {
       ^
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:76:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(RNNoiseBox, rnnoise_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:93:10: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
gboolean set_model_delete_button_visibility(GtkListItem* item, const char* name) {
         ^
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:94:21: warning: variable 'default_model_name' is not initialized [cppcoreguidelines-init-variables]
  const std::string default_model_name = _("Standard Model");
                    ^
                                       = 0
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:100:15: warning: variable 'name' is not initialized [cppcoreguidelines-init-variables]
  std::string name = gtk_string_object_get_string(GTK_STRING_OBJECT(gtk_list_item_get_item(item)));
              ^
                   = 0
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:105:29: warning: variable 'model_file' is not initialized [cppcoreguidelines-init-variables]
    std::filesystem::remove(model_file);
                            ^
                                       = 0
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:112:25: warning: variable 'p' is not initialized [cppcoreguidelines-init-variables]
  std::filesystem::path p{file_path};
                        ^
                          = 0
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:128:9: warning: variable 'active_window' is not initialized [cppcoreguidelines-init-variables]
  auto* active_window = gtk_application_get_active_window(GTK_APPLICATION(self->data->application));
        ^
                      = nullptr
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:130:9: warning: variable 'dialog' is not initialized [cppcoreguidelines-init-variables]
  auto* dialog = gtk_file_chooser_native_new(_("Import Model File"), active_window, GTK_FILE_CHOOSER_ACTION_OPEN,
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/rnnoise_ui.cpp:171:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(RNNoiseBox* self,
     ^
/var/home/v/devel/easyeffects/src/spectrum.cpp:20:10: error: 'spectrum.hpp' file not found [clang-diagnostic-error]
#include "spectrum.hpp"
         ^~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/stereo_tools.cpp:20:10: error: 'stereo_tools.hpp' file not found [clang-diagnostic-error]
#include "stereo_tools.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/stereo_tools_preset.cpp:20:10: error: 'stereo_tools_preset.hpp' file not found [clang-diagnostic-error]
#include "stereo_tools_preset.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:20:10: error: 'stereo_tools_ui.hpp' file not found [clang-diagnostic-error]
#include "stereo_tools_ui.hpp"
         ^~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:24:8: warning: constructor does not initialize these fields: stereo_tools, connections, gconnections [cppcoreguidelines-pro-type-member-init]
struct Data {
       ^
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:24:8: warning: class 'Data' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:26:3: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
  ~Data() { util::debug("data struct destroyed"); }
  ^
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:37:8: warning: declaration uses identifier '_StereoToolsBox', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
struct _StereoToolsBox {
       ^~~~~~~~~~~~~~~
       StereoToolsBox
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:37:8: warning: constructor does not initialize these fields: parent_instance, input_gain, output_gain, input_level_left, input_level_right, output_level_left, output_level_right, input_level_left_label, input_level_right_label, output_level_left_label, output_level_right_label, mode, balance_in, balance_out, slev, sbal, mlev, mpan, stereo_base, delay, sc_level, stereo_phase, softclip, mutel, muter, phasel, phaser, settings, data [cppcoreguidelines-pro-type-member-init]
struct _StereoToolsBox {
       ^
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:57:1: warning: variable 'G_DEFINE_TYPE' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
G_DEFINE_TYPE(StereoToolsBox, stereo_tools_box, GTK_TYPE_BOX)
^
/var/home/v/devel/easyeffects/src/stereo_tools_ui.cpp:63:6: warning: variable 'setup' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void setup(StereoToolsBox* self, std::shared_ptr<StereoTools> stereo_tools, const std::string& schema_path) {
     ^
/var/home/v/devel/easyeffects/src/stream_input_effects.cpp:20:10: error: 'stream_input_effects.hpp' file not found [clang-diagnostic-error]
#include "stream_input_effects.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/stream_output_effects.cpp:20:10: error: 'stream_output_effects.hpp' file not found [clang-diagnostic-error]
#include "stream_output_effects.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/tags_plugin_name.cpp:20:10: error: 'tags_plugin_name.hpp' file not found [clang-diagnostic-error]
#include "tags_plugin_name.hpp"
         ^~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/test_signals.cpp:20:10: error: 'test_signals.hpp' file not found [clang-diagnostic-error]
#include "test_signals.hpp"
         ^~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/test_signals.cpp:43:9: warning: variable 'out_left' is not initialized [cppcoreguidelines-init-variables]
  auto* out_left = static_cast<float*>(pw_filter_get_dsp_buffer(d->out_left, n_samples));
        ^
                 = nullptr
/var/home/v/devel/easyeffects/src/test_signals.cpp:44:9: warning: variable 'out_right' is not initialized [cppcoreguidelines-init-variables]
  auto* out_right = static_cast<float*>(pw_filter_get_dsp_buffer(d->out_right, n_samples));
        ^
                  = nullptr
/var/home/v/devel/easyeffects/src/test_signals.cpp:50:13: warning: variable 'left_out' is not initialized [cppcoreguidelines-init-variables]
  std::span left_out{out_left, out_left + n_samples};
            ^
                     = 0
/var/home/v/devel/easyeffects/src/test_signals.cpp:51:13: warning: variable 'right_out' is not initialized [cppcoreguidelines-init-variables]
  std::span right_out{out_right, out_right + n_samples};
            ^
                      = 0
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:20:10: error: 'ui_helpers.hpp' file not found [clang-diagnostic-error]
#include "ui_helpers.hpp"
         ^~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:24:6: warning: variable 'widget_serial' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
uint widget_serial = 0;
     ^
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:26:13: warning: variable 'user_locale' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
std::locale user_locale;
            ^
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:28:22: warning: variable 'map_ignore_filter_idle_add' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
std::map<uint, bool> map_ignore_filter_idle_add;
                     ^
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:75:15: warning: variable 'translated_name' is not initialized [cppcoreguidelines-init-variables]
  std::string translated_name;
              ^
                              = 0
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:88:9: warning: variable 'box' is not initialized [cppcoreguidelines-init-variables]
  auto* box = gtk_box_new(GTK_ORIENTATION_VERTICAL, 6);
        ^
            = nullptr
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:106:9: warning: variable 'dialog' is not initialized [cppcoreguidelines-init-variables]
  auto* dialog = gtk_message_dialog_new(GTK_WINDOW(parent),
        ^
               = nullptr
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:133:9: warning: variable 'adjustment' is not initialized [cppcoreguidelines-init-variables]
  auto* adjustment = gtk_spin_button_get_adjustment(button);
        ^
                   = nullptr
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:138:8: warning: variable 'minus_infinity' is not initialized [cppcoreguidelines-init-variables]
  bool minus_infinity = (!lower_bound && value <= util::minimum_db_d_level);
       ^
                      = 0
/var/home/v/devel/easyeffects/src/ui_helpers.cpp:150:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  auto min = 0.0, max = 0.0;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~
/var/home/v/devel/easyeffects/src/util.cpp:20:10: error: 'util.hpp' file not found [clang-diagnostic-error]
#include "util.hpp"
         ^~~~~~~~~~
/var/home/v/devel/easyeffects/src/util.cpp:27:15: warning: variable 'msg' is not initialized [cppcoreguidelines-init-variables]
  std::string msg = "\t" + file_path.filename().string() + ":" + to_string(location.line()) + "\t" + message;
              ^
                  = 0
/var/home/v/devel/easyeffects/src/util.cpp:71:15: warning: variable 'delta' is not initialized [cppcoreguidelines-init-variables]
  const float delta = (log10_stop - log10_start) / static_cast<float>(npoints - 1);
              ^
                    = NAN
/var/home/v/devel/easyeffects/src/util.cpp:75:9: warning: variable 'v' is not initialized [cppcoreguidelines-init-variables]
  float v = log10_start;
        ^
          = NAN
/var/home/v/devel/easyeffects/src/util.cpp:95:15: warning: variable 'delta' is not initialized [cppcoreguidelines-init-variables]
  const float delta = (stop - start) / static_cast<float>(npoints - 1);
              ^
                    = NAN
/var/home/v/devel/easyeffects/src/util.cpp:137:16: warning: variable 'v_linear' is not initialized [cppcoreguidelines-init-variables]
  const gfloat v_linear = std::pow(10.0F, static_cast<float>(g_variant_get_double(variant)) / 20.0F);
               ^
                        = 0
/var/home/v/devel/easyeffects/src/util.cpp:145:17: warning: variable 'v_db' is not initialized [cppcoreguidelines-init-variables]
  const gdouble v_db = 20.0 * std::log10(static_cast<double>(g_value_get_float(value)));
                ^
                     = 0
/var/home/v/devel/easyeffects/src/util.cpp:151:16: warning: variable 'v_linear' is not initialized [cppcoreguidelines-init-variables]
  const gfloat v_linear = std::pow(10.0F, static_cast<float>(g_variant_get_double(variant)) / 10.0F);
               ^
                        = 0
/var/home/v/devel/easyeffects/src/util.cpp:165:17: warning: variable 'v_linear' is not initialized [cppcoreguidelines-init-variables]
  const gdouble v_linear = std::pow(10.0, g_variant_get_double(variant) / 20.0);
                ^
                         = 0
/var/home/v/devel/easyeffects/src/util.cpp:174:17: warning: variable 'v_db' is not initialized [cppcoreguidelines-init-variables]
  const gdouble v_db = 20.0 * std::log10(g_value_get_double(value));
                ^
                     = 0
/var/home/v/devel/easyeffects/src/util.cpp:226:11: warning: variable 'rgba' is not initialized [cppcoreguidelines-init-variables]
  GdkRGBA rgba;
          ^
               = 0
/var/home/v/devel/easyeffects/src/util.cpp:240:9: warning: variable 's' is not initialized [cppcoreguidelines-init-variables]
  auto* s = g_settings_get_string(settings, key);
        ^
          = nullptr
/var/home/v/devel/easyeffects/src/util.cpp:242:15: warning: variable 'output' is not initialized [cppcoreguidelines-init-variables]
  std::string output = s;
              ^
                     = 0
/var/home/v/devel/easyeffects/src/util.cpp:250:20: warning: variable 'schema' is not initialized [cppcoreguidelines-init-variables]
  GSettingsSchema* schema;
                   ^
                          = nullptr
/var/home/v/devel/easyeffects/src/util.cpp:251:16: warning: variable 'type' is not initialized [cppcoreguidelines-init-variables]
  const gchar* type;
               ^
                    = nullptr
/var/home/v/devel/easyeffects/src/util.cpp:252:13: warning: variable 'detail' is not initialized [cppcoreguidelines-init-variables]
  GVariant* detail;
            ^
                   = nullptr
/var/home/v/devel/easyeffects/src/util.cpp:253:15: warning: variable 'min_v' is not initialized [cppcoreguidelines-init-variables]
  std::string min_v, max_v;
              ^
                    = 0
/var/home/v/devel/easyeffects/src/util.cpp:264:15: warning: variable 'min' is not initialized [cppcoreguidelines-init-variables]
    GVariant *min, *max;
              ^
                  = nullptr
/var/home/v/devel/easyeffects/src/util.cpp:265:12: warning: variable 'smin' is not initialized [cppcoreguidelines-init-variables]
    gchar *smin, *smax;
           ^
                = nullptr
/var/home/v/devel/easyeffects/src/util.cpp:301:12: warning: redundant boolean literal in conditional return statement [readability-simplify-boolean-expr]
    return false;
~~~~~~~~~~~^~~~~~
/var/home/v/devel/easyeffects/src/util.cpp:325:6: warning: variable 'idle_add' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
void idle_add(std::function<void()> cb) {
     ^
